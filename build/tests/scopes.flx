// scopes.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

class Orr
{
	static var Another = 76
	var bar: int = 311
}

class Something
{
	static var Or: Orr
	var oor: int = 400

	fn somefoo() -> Orr
	{
		return Orr()
	}

	class Inside
	{
		static var Another = 511

		fn insideFoo() -> int
		{
			return 10
		}

		static fn staticInside() -> int
		{
			return 23
		}
	}

	enum InsideEnum
	{
		case None
		case Single
		case Double
		case Triple
		case Quadruple
		case Quintuple
		case Hextuple
	}
}

enum OutsideEnum
{
	case Zero
	case One
	case Two
	case Three
	case Four
}

enum StrongEnum
{
	case Red
	case Green
	case Blue
}


class Sheep
{
	var thing = 43
	var foo: Something

	static var afoo: Something
}

namespace n1
{
	namespace n2
	{
		var m: Sheep

		var tup: (string, int)
		fn nest() -> (string, int)
		{
			printf("nested\n");
			return ("TUPLE ONE", 591)
		}

		class DeepClass
		{
			class DeeperClass
			{
				static fn deepStatic() -> int { 23 }
			}
		}
	}
}

public fn doScopeTest(argv: string)
{
	var x = argv.raw + 1

	let p = 64.4 ÷ 4.1

	let m = Math.√(41.5)

	let mmx = Something.Inside.Another
	let another = 4
	let foo = Something()

	let mm = foo.somefoo().bar


	let gg = (4, 100.39)
	printf("gg.0: %d, gg.1: %.2f\n", (4, 50).0, gg.1)

	printf("[%d]\n", foo.oor)
	printf("p: %f, g: %d, m: %d, argv[0]: %s, %.14f\n\n", p, another, mmx, x, Math.π())


	let x1: int = OutsideEnum.Three as int
	let x2: int = Something.InsideEnum.Quadruple as int
	let x3 = n1.n2.DeepClass.DeeperClass()
	printf("x1: %d, x2: %d, x3: %d\n", x1, x2, n1.n2.DeepClass.DeeperClass.deepStatic())


	n1.n2.m.foo.oor = 968

	let t1 = n1.n2.m.foo.somefoo().bar
	let t2 = n1.n2.nest().0.length

	n1.n2.tup.0 = "HELLO, WORLD" + "!"
	printf("tup: %s\n", n1.n2.tup.0)

	printf("t1 = %d, t2 = %d\n", t1, t2)
	printf("afoo: %d\n", Sheep.afoo.somefoo().bar)

}






