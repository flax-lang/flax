// functions.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


// import Foundation
import LibCInterface


func foo(a: int) { printf("foo: %d\n", a) }
func bar(a: int) { printf("bar: %d\n", a) }
func qux() { ("qux\n") }

class SomeClass
{
	func foo(a: int) { printf("foo in class: %p // %d\n", self, a) }
	static func bar(a: int) { printf("static bar in class: %d\n", a) }
}

namespace SomeNS
{
	func foo(a: int) { printf("foo in namespace: %d\n", a) }

	class NestedClass
	{
		func foo(a: int) { printf("foo in nested class: %p // %d\n", self, a) }
		static func bar(a: int) { printf("static bar in nested class: %d\n", a) }

		func mgen<T>(a: T) -> T { printf("method generic: %p // %d\n", self, a) }
		static func smgen<T>(a: T) -> T { printf("static generic: %d\n", a) }
	}

	func ngen<T>(a: T) -> T { printf("namespace generic: %p // %d\n", a) }
}



func gen<T>(a: T) -> T
{
	if(typeof(a) == typeof(int))
	{
		printf("<%d>\n", a)
	}
	else if(typeof(a) == typeof(float64))
	{
		printf("<%lf>\n", a)
	}

	return a + 1
}

func et(a: int)
{
	printf(" %d", a)
}

public func doFunctionTest()
{
	var f = qux
	f()

	var g = foo
	g(10)

	g = bar
	g(20)

	printf("each test:")
	let arr = alloc[4] int
	arr[0] = 11
	arr[1] = 22
	arr[2] = 33
	arr[3] = 44

	each(arr, 4, et)



	printf("\n\nscope test\n")
	do {

		g = SomeClass.bar
		g(10)

		g = SomeNS.NestedClass.bar
		g(20)

		g = SomeNS.foo
		g(30)
	}


	printf("\nmethod test\n")
	do {
		var method = SomeClass.foo
		let sc = SomeClass()
		method(&sc, 40)

		var method2 = SomeNS.NestedClass.foo
		let nc = SomeNS.NestedClass()
		method2(&nc, 50)
	}


	printf("\ngeneric test\n")
	do {

		var gf: [(int) -> int] = gen
		var gff: [(float) -> float] = gen

		gf(100)
		gff(3.1415926536)

		gf = SomeNS.ngen
		gf(200)


		// var smth = gen
	}
}



func each(arr: int*, length: int, f: [(int) -> void])
{
	var i = 0

	while i < length
	{
		f(arr[i])
		i += 1
	}
}























