// functions.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


// import Foundation
import LibCInterface


fn foo(a: int) { printf("foo: %d\n", a) }
fn bar(a: int) { printf("bar: %d\n", a) }
fn qux() { ("qux\n") }

class SomeClass
{
	fn foo(a: int) { printf("foo in class: %p // %d\n", self, a) }
	static fn bar(a: int) { printf("static bar in class: %d\n", a) }
}

namespace SomeNS
{
	fn foo(a: int) { printf("foo in namespace: %d\n", a) }

	class NestedClass
	{
		fn foo(a: int) { printf("foo in nested class: %p // %d\n", self, a) }
		static fn bar(a: int) { printf("static bar in nested class: %d\n", a) }

		fn mgen<T>(a: T) -> T { printf("method generic: %p // %d\n", self, a) }
		static fn smgen<T>(a: T) -> T { printf("static generic: %d\n", a) }
	}

	fn ngen<T>(a: T) -> T { printf("namespace generic: %p // %d\n", a) }
}



fn gen<T>(a: T) -> T
{
	// if(typeof(a) == typeof(int))
	// {
	// 	printf("int: %d\n", a)
	// }
	// else if(typeof(a) == typeof(f64))
	// {
	// 	printf("float: %lf\n", a)
	// }

	return a + 1
}

fn et(a: int)
{
	printf(" %d", a)
}

fn et1(a: int) -> int
{
	printf(" %d", a)
	return a
}


class SomeStruct
{
	var f: [(SomeStruct*, int) -> int]
	fn fun(a: string) -> int
	{
		printf("method: %s\n", a)
		return 40
	}

	static fn sfn(self: SomeStruct*, a: int) -> int
	{
		printf("static: %p, %d\n", self, a);
		return a;
	}
}


public fn doFunctionTest()
{
	var f = qux
	f()

	var g = foo
	g(10)

	g = bar
	g(20)

	printf("each test:")
	let arr: int* = alloc[4] int as int*
	arr[0] = 11
	arr[1] = 22
	arr[2] = 33
	arr[3] = 44

	each(arr, 4, et)



	printf("\n\nscope test\n")
	do {

		g = SomeClass.bar
		g(10)

		g = SomeNS.NestedClass.bar
		g(20)

		g = SomeNS.foo
		g(30)
	}


	printf("\nmethod test\n")
	do {
		var method = SomeClass.foo
		let sc = SomeClass()
		method(&sc, 40)

		var method2 = SomeNS.NestedClass.foo
		let nc = SomeNS.NestedClass()
		method2(&nc, 50)
	}


	printf("\ngeneric test\n")
	do {
		var gf: [(int) -> int] = gen
		var gff: [(f64) -> f64] = gen

		gf(100)
		gff(3.1415926536)

		// gf = SomeNS.ngen
		gf(200)


		// reassignment
		printf("\nclass test\n")
		do {
			var gf2: [(int) -> int] = et1
			printf("et:"); gf2(300); printf("\n")
			gf2 = gen
			gf2(400)

			var s = SomeStruct()

			let gf3 = SomeStruct.sfn
			gf3(&s, 500)

			s.f = gf3
			let gf4 = s.f
			gf4(&s, 600)

			printf("\ngeneric member test\n")

			let gf5: [(int) -> int] = SomeNS.NestedClass.smgen
			gf5(10)

			var gf6: [(SomeNS.NestedClass*, int) -> int]
			gf6 = SomeNS.NestedClass.mgen

			let nc = SomeNS.NestedClass()
			gf6(&nc, 10)


			printf("\ndirect field calling\n")
			let res1 = s.f(&s, 10)
		}
	}
}



fn each(arr: int*, length: int, f: [(int) -> void])
{
	var i = 0

	while i < length
	{
		f(arr[i])
		i += 1
	}
}











