// arraytest.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export test_arrays
import "libc"

public fn doArrayTest()
{
	do {
		var arr: [[int: 2]: 2] = [ [ 1, 2 ], [ 5, 6 ] ]
		arr[1][1] = 400

		libc.printf("a[0][0]: %d, a[0][1]: %d, a[1][0]: %d, a[1][1]: %d\n", arr[0][0], arr[0][1], arr[1][0], arr[1][1])

		var d: [f64: 4] = [ 1.0, 2.0, 4.0, 8.0 ]
		libc.printf("d[0]: %f, d[1]: %f, d[2]: %f, d[3]: %f\n", d[0], d[1], d[2], d[3]);


		var arr1: &mut int = @raw alloc mut int [4]
		arr1[1] = 97
		arr1[2] = 43

		libc.printf("arr[1] = %d\n", (arr1 + 1)[0])
		libc.printf("arr[2] = %d\n", (3 + arr1)[-1])

		free arr1

		libc.printf("\n\n")
		// var s = alloc[4][4] string("array of array of strings test")
		// s[1][2] = "BOO YOU STRING"

		// libc.printf("s[1][2] = %s, s[1][2].length = %ld\n", s[1][2], s[1][2].length)

		// free s
	}

	libc.printf("\n")
	dynamicArrays()
}

public fn foldl(first: int, arr: [int:], f: fn(int, int) -> int) -> int
{
	if arr.length == 0 { return first }
	return 10
	// return foldl(f(first, pop(&arr as mut)), arr[:arr.length], f)
}

fn pop<T>(s: &mut [T:]) -> T
{
	let ret = (*s)[(*s).length - 1]
	*s = (*s)[0:(*s).length - 1]

	return ret
}

fn f(a: int, b: int) -> int
{
	return a * b
}

fn setup(max: int) -> [int]
{
	var arr: [int]

	var i = 1
	while i <= max
	{
		arr.append(i)
		i += 1
	}

	return arr
}

fn dynamicArrays()
{
	do {
		libc.printf("PRE X\n")
		var x: [string]
		libc.printf("POST X\n")
		var y = alloc string [5]

		var i = 0

		x.append(string("aaa") + string("AAA"))
		x.append(string("BBB") + string("bbb"))
		x.append(string("ccc") + string("CCC"))
		x.append(string("DDD") + string("ddd"))
		x.append(string("eee") + string("EEE"))

		x += y

		let k = x
		var z = k.clone()

		libc.printf("k = %p, x = %p\n", k.ptr, x.ptr)
		libc.printf("z.length = %d\n", z.length)

		z[9] = string("LAST ELEMENT")

		libc.printf("z <= x: %d\n", z <= x)

		while i < z.length
		{
			libc.printf("z[%ld] = %s // %ld\n", i, z[i], z[i].refcount)
			i += 1
		}

		libc.printf("z.back() = %s, length = %ld, cap = %ld\n", z[z.length - 1], z.length, z.capacity)

		libc.printf("x == k ? %d\n", x == k)

		let fib = setup(5)

		let sum = foldl(1, fib, f)
		libc.printf("sum = %ld\n", sum)
	}
}

/*
	MAKE:
	110 / 195


	SHAKE:
	107 / 191

	FMODULES:
	95 / 166
	96 / 167
*/































