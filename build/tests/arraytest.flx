// arraytest.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import LibCInterface

public Æ’ doArrayTest()
{
	do {
		var arr: int[2][2] = [ [ 1, 2 ], [ 5, 6 ] ]
		arr[1][1] = 400

		printf("a[0][0]: %d, a[0][1]: %d, a[1][0]: %d, a[1][1]: %d\n", arr[0][0], arr[0][1], arr[1][0], arr[1][1])

		var d: f64[4] = [ 1.0, 2.0, 4.0, 8.0 ]
		printf("d[0]: %f, d[1]: %f, d[2]: %f, d[3]: %f\n", d[0], d[1], d[2], d[3]);


		var arr1: int* = alloc[4] int as int*
		arr1[1] = 97
		arr1[2] = 43

		printf("arr[1] = %d\n", (arr1 + 1)[0])
		printf("arr[2] = %d\n", (3 + arr1)[-1])

		dealloc arr1

		printf("\n\n")
		var s = alloc[4][4] string("array of array of strings test")
		s[1][2] = "BOO YOU STRING"

		printf("s[1][2] = %s, s[1][2].length = %ld\n", s[1][2], s[1][2].length)

		dealloc s
	}

	printf("\n")
	dynamicArrays()
}

public func foldl(first: int, arr: int[], fn: [(int, int) -> int]) -> int
{
	if arr.length == 0 { return first }
	return foldl(fn(first, arr.popBack()), arr, fn)
}

func f(a: int, b: int) -> int
{
	return a * b
}

func setup(max: int) -> int[]
{
	var arr: int[]

	var i = 1
	while i <= max
	{
		arr += i
		i += 1
	}

	return arr
}

func dynamicArrays()
{
	do {
		printf("PRE X\n")
		var x: string[]
		printf("POST X\n")
		var y = alloc[5] string

		var i = 0

		x += "aaa" + "AAA"
		x += "BBB" + "bbb"
		x += "ccc" + "CCC"
		x += "DDD" + "ddd"
		x += "eee" + "EEE"

		x += y

		let k = x
		var z = k.clone()

		printf("k = %p, x = %p\n", k.data, x.data)

		z[9] = "LAST ELEMENT"

		printf("z <= x: %d\n", z <= x)

		while i < z.length
		{
			printf("z[%ld] = %s // %ld\n", i, z[i], z[i].rc)
			i += 1
		}

		printf("z.back() = %s, length = %zd, cap = %zd\n", z.back(), z.length, z.capacity)



		let fib = setup(5)

		let sum = foldl(1, fib, f)
		printf("sum = %zd\n", sum)

		// x == k
		dealloc x

		// z is z
		dealloc z
	}
}

/*
	MAKE:
	110 / 195


	SHAKE:
	107 / 191

	FMODULES:
	95 / 166
	96 / 167
*/































