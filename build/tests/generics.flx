// generics.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation


class SomeClass
{
	func gen<T, K>(a: T, b: K) -> K
	{
		let m = alloc K
		printf("instance generic\n")
		return #m;
	}

	static func sgen<T, K>(a: T, b: K) -> T
	{
		let m = alloc T
		printf("static generic\n")
		return #m;
	}
}

namespace SomeNS
{
	func ngen<T>(a: T) -> T
	{
		let m = alloc T
		printf("namespace generic\n")
		return #m;
	}
}




func foo_generic<T>(a: T, b: T, c: T)
{
	printf("foo: triple T\n")
	(a, b, c)
}

func foo_generic<T>(a: T, b: T)
{
	printf("foo: double T\n")
	(a, b)
}

func foo_generic<T, K>(a: T, b: K)
{
	let ta = typeof(a)
	let tb = typeof(b)

	let x = T()
	let y = K()

	if(ta == Type.int8)
	{
		printf("foo: (int8)   %d, ", a)
	}
	else if(ta == Type.int16)
	{
		printf("foo: (int16)  %d, ", a)
	}
	else if(ta == Type.int32)
	{
		printf("foo: (int32)  %d, ", a)
	}
	else if(ta == Type.int64)
	{
		printf("foo: (int64)  %d, ", a)
	}
	else if(ta == Type.String)
	{
		printf("foo: (string) %s, ", a)
	}


	if(tb == Type.int8)
	{
		printf("(int8)   %d\n", b)
	}
	else if(tb == Type.int16)
	{
		printf("(int16)  %d\n", b)
	}
	else if(tb == Type.int32)
	{
		printf("(int32)  %d\n", b)
	}
	else if(tb == Type.int64)
	{
		printf("(int64)  %d\n", b)
	}
	else if(tb == Type.String)
	{
		printf("(string) %s\n", b)
	}
}

public func doGenericsTest()
{
	foo_generic(7, 6 as int8)
	foo_generic(7, 6 as int16)
	foo_generic(7, 6 as int32)

	foo_generic(5, "asdf")

	foo_generic(1, 4, 9)



	let sc = SomeClass()
	sc.gen(10, 20)
	SomeClass.sgen(10, 20)
	SomeNS.ngen("foo")
}














