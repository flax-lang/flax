// generics.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation
import fizzbuzz

class Outer
{
	class SomeClass
	{
		fn gen<T, K>(a: T, b: K) -> K
		{
			let m = alloc K
			printf("instance generic\n")
			return *m;
		}

		static fn sgen<T, K>(a: T, b: K) -> T
		{
			let m = alloc T
			printf("static generic\n")
			return *m;
		}
	}
}

extension Outer
{
	extension SomeClass
	{
		fn egen<T>(a: T)
		{
			let m = alloc T
			printf("extension generic\n")
		}

		static fn segen()
		{
			// let m = alloc T
			printf("static extension generic\n")
		}
	}
}

namespace SomeNS
{
	fn ngen<T>(a: T) -> T
	{
		let m = alloc T
		printf("namespace generic\n")
		return *m;
	}
}




fn foo_generic<T>(a: T, b: T, c: T)
{
	printf("foo: triple T\n")
	(a, b, c)
}

fn foo_generic<T>(a: T, b: T)
{
	printf("foo: double T\n")
	(a, b)
}

fn foo_generic<T, K>(a: T, b: K)
{
	// let ta = typeof(a)
	// let tb = typeof(b)

	let x = T()
	let y = K()

	// if(ta == Type.i8)
	// {
	// 	printf("foo: (i8)   %d, ", a)
	// }
	// else if(ta == Type.i16)
	// {
	// 	printf("foo: (i16)  %d, ", a)
	// }
	// else if(ta == Type.i32)
	// {
	// 	printf("foo: (i32)  %d, ", a)
	// }
	// else if(ta == Type.i64)
	// {
	// 	printf("foo: (i64)  %d, ", a)
	// }
	// else if(ta == Type.string)
	// {
	// 	printf("foo: (string) %s, ", a)
	// }


	// if(tb == Type.i8)
	// {
	// 	printf("(i8)   %d\n", b)
	// }
	// else if(tb == Type.i16)
	// {
	// 	printf("(i16)  %d\n", b)
	// }
	// else if(tb == Type.i32)
	// {
	// 	printf("(i32)  %d\n", b)
	// }
	// else if(tb == Type.i64)
	// {
	// 	printf("(i64)  %d\n", b)
	// }
	// else if(tb == Type.string)
	// {
	// 	printf("(string) %s\n", b)
	// }
}

fn arrtest<T>(b: T, x: T[]) -> T
{
	return b
}

fn foo(a: f64*, b: f64*[])
{
	arrtest(a, b)
}


public fn doGenericsTest()
{
	foo_generic(7, 6 as i8)
	foo_generic(7, 6 as i16)
	foo_generic(7, 6 as i32)

	foo_generic(5, "asdf")

	foo_generic(1, 4, 9)

	let sc = Outer.SomeClass()
	sc.gen(10, 20)
	sc.egen(47)
	Outer.SomeClass.segen()
	Outer.SomeClass.sgen(10, 20)
	SomeNS.ngen("foo")


	let x = alloc[5] f64*
	let y = 50.3;
	arrtest(&y, x)
}














