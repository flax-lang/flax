// test.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

// import Foundation

// import tests.fizzbuzz
// import tests.recursiveFib
// import tests.scopes
// import tests.operators
// import tests.arraytest
// import tests.generics

// import Utilities


// name idea: mill


// ƒ runTests()
// {
// 	// fib
// 	printf("*** FIBONACII SEQUENCE ***\n")

// 	var n = 0
// 	while n < 20
// 	{
// 		printf("%d: %lld\n", n, doRecursiveFib(n))
// 		n += 1
// 	}
// 	printf("\n\n");


// 	// fizzbuzz
// 	printf("*** FIZZBUZZ ***\n")
// 	doFizzBuzz(10);
// 	printf("\n\n");


// 	// scopes
// 	printf("*** SCOPE RESOLUTION REGRESSION TEST ***\n")
// 	doScopeTest("__llvm_jit__build/test")
// 	printf("\n\n");


// 	// operators and tuples (vectors type, mainly)
// 	printf("*** OPERATORS/TUPLE REGRESSION TEST ***\n")
// 	doOperatorTupleTest()
// 	printf("\n\n");


// 	// arrays
// 	printf("*** ARRAY REGRESSION TEST ***\n")
// 	doArrayTest()
// 	printf("\n\n")


// 	// generics
// 	printf("*** GENERICS TEST ***\n")
// 	doGenericsTest()
// 	let s = generic_test(5, "HELLO WORLD #")
// 	printf("s = %s\n", s)
// 	printf("\n\n")


// 	// fin.
// 	printf("========= TESTS COMPLETE =========\n\n")
// }



// class Foo
// {
// 	ƒ doStuff()
// 	{
// 		printf("in foo\n")
// 	}
// }

// class Bar : Foo
// {
// 	override ƒ doStuff()
// 	{
// 		printf("in bar\n")
// 	}
// }







// class FooBar : Bar
// {
// 	override ƒ doBar()
// 	{
// 		printf("in foobar\n")
// 	}
// }






// func acceptFoo(f: Foo)
// {
// 	printf("got foo\n")
// }

// func acceptFooPtr(f: Foo)
// {
// 	printf("got foo pointer\n")
// }




// public func main(argc: Int32, argv: Int8**) -> Int
// {
	// runTests()

	// let b: Bar()

	// printf("pi = %f\n", Math.π())

	// acceptFoo(b)



	// let bp = alloc Bar
	// acceptFooPtr(bp)

	// let foo: Foo = Bar()
	// foo.doStuff()

	// printf("Int32.min = %d, Int32.max = %d\n", Int32.min, Int32.max);

	// var arr8: Array<Int8>
	// var arr32: Array<Int32>

	// arr8.data = alloc[3] Int8
	// arr32.data = alloc[30] Int8
	// printf("data8 = %p\n", arr8.data);
	// printf("data32 = %p\n", arr32.data);








	// todo: look into these.

	// >>> universal function call syntax -- use dot-operator calling on everything.
	// 	1. when you try to call a.b(c, ...), the usual "finding things in c" takes place
	// 	2. if nothing in c matches b (or c is not a compound type), use UFCS.
	// 	3. search for a function b(a, c, ...). if it exists, call it. if not, throw error as usual.

	// >>> multiple, dynamic dispatch


	// printf("\n<< done >>\n");
// 	return 0
// }

































class Orr
{
	static var Another = 76
	var bar = 311
}

class Something
{
	static var Or: Orr
	var oor = 400

	// ƒ somefoo() -> Orr
	// {
	// 	return Orr()
	// }

	class Inside
	{
		static var Another = 511
	}

	enum InsideEnum
	{
		case None
		case Single
		case Double
		case Triple
		case Quadruple
		case Quintuple
		case Hextuple
	}
}

enum OutsideEnum
{
	case Zero
	case One
	case Two
	case Three
	case Four
}


class Sheep
{
	var thing = 43
	var foo: Something = Something()

	static var afoo: Something
}

namespace n1
{
	namespace n2
	{
		// var m: Sheep = Sheep()

		// var tup: (String, Int)
		// func nest() -> (String, Int)
		// {
		// 	printf("nested\n");
		// 	return ("TUPLE ONE", 591)
		// }
	}
}

public func main() -> Int
{
	return 0
}
















