// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

var m = 40

namespace Thing::Troll
{
	func test()
	{
		return
	}

	struct Floby
	{
		var haha: Int = 691
		init(d: Int)
		{
			self.haha = d
		}
		init()
		{
		}
		func food() -> Int
		{
			return 1058
		}
	}
}

struct Bar
{
	var norf: Int = 1600
	var yorg: Int = 5000
	var goop: Int = 6810
	init(q: Int, a: Int)
	{
		self.qux = q
		self.aaa = a
	}
}

extension Bar
{
	var qux: Int = 500
	var aaa: Int = 1000

	init()
	{
		self.init(100, 300)
	}

	func fwoosh()
	{
		printf("Fwoosh! The joke goes over your head.\n");
	}

	var poog: Int
	{
		get
		{
			return 500
		}
		set(fag)
		{
			self.norf = fag / 4
		}
	}
}

enum Fac
{
	case Ares
	case Apollo
	case Artemis
	case Athena
}


struct sa
{
	var d: Int = 500
}

struct sb
{
	var d: Int = 300
}

func fac(x: Fac) { printf("[%d]\n", x) }
func fad(x: aBar) { printf("[%d, %d]\n", x.qux, x.aaa) }

typealias aBar = Bar


func mult(x: Int) -> Int { x * 2 }
func main(argc: Int32, argv: Int8**) -> Int
{
	var d = 100
	var e = Fac.Apollo
	fac(e)


	var k: sa
	var c = #(&k as sb*)


	var b: aBar
	fad(b)

	m = 599
	var j = m

	printf("%d, %d\n", c.d, j)

	return 0
}





















