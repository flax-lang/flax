// test.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

// import Foundation
// import Utilities

// import tests.fizzbuzz
// import tests.recursiveFib
// import tests.scopes
// import tests.operators
// import tests.arraytest
// import tests.generics
// import tests.limits


// name idea: mill


// ƒ runTests()
// {
// 	// fib
// 	printf("*** FIBONACII SEQUENCE ***\n")

// 	var n = 0
// 	while n < 20
// 	{
// 		printf("%d: %lld\n", n, doRecursiveFib(n))
// 		n += 1
// 	}
// 	printf("\n\n");


// 	// fizzbuzz
// 	printf("*** FIZZBUZZ ***\n")
// 	doFizzBuzz(15);
// 	printf("\n\n");


// 	// scopes
// 	printf("*** SCOPE RESOLUTION REGRESSION TEST ***\n")
// 	doScopeTest("__llvm_jit__build/test")
// 	printf("\n\n");


// 	// operators and tuples (vectors type, mainly)
// 	printf("*** OPERATORS/TUPLE REGRESSION TEST ***\n")
// 	doOperatorTupleTest()
// 	printf("\n\n");


// 	// arrays
// 	printf("*** ARRAY REGRESSION TEST ***\n")
// 	doArrayTest()
// 	printf("\n\n")


// 	// generics
// 	printf("*** GENERICS TEST ***\n")
// 	doGenericsTest()
// 	let s = generic_test(5, "HELLO WORLD #")
// 	printf("s = %s\n", s)
// 	printf("\n\n")


// 	// int limits
// 	printf("*** PRINTING INT LIMITS ***\n")
// 	printIntegerLimits()
// 	printf("\n\n")


// 	// fin.
// 	printf("========= TESTS COMPLETE =========\n\n")
// }

ƒ randomTest(fmt: String, argn: Int64, args: Any*)
{
	var i = 0
	while i < argn
	{
		let argtype = typeof(args[i])

		if argtype == typeof(String)
		{
			printf("%s", args[i] as String)
		}
		else if argtype == typeof(Int8)
		{
			printf("%hhd", args[i] as Int8)
		}
		else if argtype == typeof(Int16)
		{
			printf("%hd", args[i] as Int16)
		}
		else if argtype == typeof(Int32)
		{
			printf("%d", args[i] as Int32)
		}
		else if argtype == typeof(Int64)
		{
			printf("%lld", args[i] as Int64)
		}
		else if argtype == typeof(Uint8)
		{
			printf("%hhu", args[i] as Uint8)
		}
		else if argtype == typeof(Uint16)
		{
			printf("%hu", args[i] as Uint16)
		}
		else if argtype == typeof(Uint32)
		{
			printf("%u", args[i] as Uint32)
		}
		else if argtype == typeof(Uint64)
		{
			printf("%llu", args[i] as Uint64)
		}

		i += 1
	}
}



import LibCInterface
import String

public func main(argc: Int32, argv: Int8**) -> Int
{
	// runTests()

	// printf("pi = %.16lf\n", Math.π())



	// var arr8: Array<Int8>
	// var arr32: Array<Int32>

	// arr8.data = alloc[3] Int8
	// arr32.data = alloc[30] Int8
	// printf("data8  = %p\n", arr8.data);
	// printf("data32 = %p\n", arr32.data);


	var args = alloc[10] Any
	args[0] = "HELLO"
	args[1] = 40
	args[2] = "GOODBYE"


	randomTest("", 3, args)


	// var i = 0
	// while true
	// {
	// 	printf("%lld\n", i += 1)
	// 	usleep((10 * 1000) as Uint32)
	// }






	// todo: look into these.

	// >>> universal function call syntax -- use dot-operator calling on everything.
	// 	1. when you try to call a.b(c, ...), the usual "finding things in c" takes place
	// 	2. if nothing in c matches b (or c is not a compound type), use UFCS.
	// 	3. search for a function b(a, c, ...). if it exists, call it. if not, throw error as usual.

	// >>> multiple, dynamic dispatch


	// printf("\n<< done >>\n");
	return 0
}

















































