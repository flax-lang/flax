// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation
import tests.fizzbuzz
import tests.recursiveFib
import tests.scopes
import tests.arraytest
import tests.generics

import Utilities

@nomangle ƒ someFunc(a: String)
{
	printf("some: %s\n\n", a)
}

ƒ runTests()
{
	// fib
	printf("*** FIBONACII SEQUENCE ***\n")

	var n = 0
	while n < 20
	{
		printf("%d: %lld\n", n, doRecursiveFib(n))
		n += 1
	}
	printf("\n\n");


	// fizzbuzz
	printf("*** FIZZBUZZ ***\n")
	doFizzBuzz(20);
	printf("\n\n");


	// scopes
	printf("*** SCOPE RESOLUTION REGRESSION TEST ***\n")
	doScopeTest("__llvm_jit__build/test")
	printf("\n\n");


	// arrays
	printf("*** ARRAY REGRESSION TEST ***\n")
	doArrayTest()
	printf("\n\n")


	printf("*** STRING TEST ***\n")
	someFunc(@raw "SOME STRING" as String)
	printf("\n\n")



	printf("*** GENERICS TEST ***\n")
	doGenericsTest()
	printf("\n\n")
}



struct Foo
{
	var _bar: Int = 9000
	var bar: Int
	{
		get
		{
			return self._bar
		}
		set
		{
			self._bar = newValue
		}
	}

	ƒ doBar()
	{
		printf("in foo\n")
	}
}

struct Bar : Foo
{
	override var bar: Int
	{
		get
		{
			return 73
		}
		set
		{
			// super.bar = newValue
		}
	}

	override ƒ doBar()
	{
		printf("in bar\n")
	}

	var foo = 73
}











func overload(a: Int8)	{ printf("overload: (int8)\n"); }
func overload(a: Int64)	{ printf("overload: (int64)\n"); }


struct Sheep { var thing = 43 }
namespace n1
{
	namespace n2
	{
		var m: Sheep
		func nest() -> (String, Int)
		{
			printf("nested\n");
			return ("TUPLE ONE", 591)
		}
	}
}


let gv = 40
func main(argc: Int32, argv: Int8**) -> Int
{
	runTests()
	printf("========= TESTS COMPLETE =========\n\n")


	var uuu = Bar()
	uuu.doBar()

	let a: Int8 = 40
	let b: Int16 = 60

	overload(a)
	overload(b)

	// uuu.bar = 70

	let t1 = n1.n2.m.thing
	printf("t1 = %d\n", gv)

	printf("uuu.bar: %d, uuu.foo: %d, m = %d\n", uuu.bar, uuu.foo, t1)
	foo_generic(10, 4)

	return 0
}




























