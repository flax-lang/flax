// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

struct Foo
{
	var ty: Int = 491
}

struct Bar
{
	var norf: Int = 1600
	var yorg: Int = 5000
	var goop: Int = 6810
	var afoo: Foo

	static func unNest() -> Int
	{
		return 581
	}

	func shit() -> Int
	{
		return self.goop - self.norf
	}

	struct Nested
	{
		var g: Int = 500

		struct Nest2
		{
			var m: Int = 230
			func doShit() -> Int
			{
				println("doing shit...")
				return 47
			}

			static func staticFunc() -> Int
			{
				println("Doing some shit of a static nature...")
				return 74
			}
		}

		func stuff() -> Int
		{
			printf("in stuff(): self is %x\n", self)
			return 69
		}
	}

	init()
	{
		self.norf = 1000
		self.goop = 1500
	}
}

extension Bar
{
	var qux: Int = 500
	var aaa: Int = 1000

	func fwoosh()
	{
		println("Fwoosh! The joke goes over your head.");
	}

	var poog: Int
	{
		get
		{
			return 500
		}
		set(fag)
		{
			self.norf = fag / 4
		}
	}
}

struct Qux
{
	var k: Int = 591
}

typealias foo = Qux


func testing() -> Int
{
	if true
	{
		return 58
	}
	else
	{
		return 43
	}
}
@strong enum Foobar
{
	case One = "one"
	case Two = "two"
	case Three = "three"
}

func main(argc: Int32, argv: Int8**) -> Int
{
	let a1 = "hello!"
	let k: Type = typeof(0)
	var m: foo

	var m1 = &m as Int8*

	var t: Any
	t = 3.44

	m.k = 51

	printf("%d, %f\n", t.type, t.literal as! Float64)
	return 0
}











