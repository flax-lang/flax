// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

// struct Foo
// {
// 	var ty: Int = 491
// }

// struct Bar
// {
// 	var norf: Int = 1600
// 	var yorg: Int = 5000
// 	var goop: Int = 6810
// 	var afoo: Foo

// 	static func unNest() -> Int
// 	{
// 		return 581
// 	}

// 	func shit() -> Int
// 	{
// 		return self.goop - self.norf
// 	}

// 	struct Nested
// 	{
// 		var g: Int = 500

// 		struct Nest2
// 		{
// 			var m: Int = 230
// 			func doShit() -> Int
// 			{
// 				println("doing shit...")
// 				return 47
// 			}

// 			static func staticFunc() -> Int
// 			{
// 				println("Doing some shit of a static nature...")
// 				return 74
// 			}
// 		}

// 		func stuff() -> Int
// 		{
// 			printf("in stuff(): self is %x\n", self)
// 			return 69
// 		}
// 	}

// 	init()
// 	{
// 		self.norf = 1000
// 		self.goop = 1500
// 	}
// }

// extension Bar
// {
// 	var qux: Int = 500
// 	var aaa: Int = 1000

// 	func fwoosh()
// 	{
// 		println("Fwoosh! The joke goes over your head.");
// 	}

// 	var poog: Int
// 	{
// 		get
// 		{
// 			return 500
// 		}
// 		set(fag)
// 		{
// 			self.norf = fag / 4
// 		}
// 	}
// }

// struct Qux
// {
// 	var k: Float64 = 591.4
// }

// typealias foo = Qux


// func testing() -> Int
// {
// 	if true
// 	{
// 		return 58
// 	}
// 	else
// 	{
// 		return 43
// 	}
// }
// @strong enum Foobar
// {
// 	case One = "one"
// 	case Two = "two"
// 	case Three = "three"
// }

ﬁ ƒ sqrt(x: Float64) -> Float64

func lengthBetween(a: (Int, Int), b: (Int, Int)) -> Float64
{
	let x = a.0 - b.0
	let y = a.1 - b.1

	return sqrt((x * x) + (y * y))
}





func main(argc: Int32, argv: Int8**) -> Int
{
	var x = #argv
	// x += 1

	let f = 64 ÷ 4;
	var g = 50;

	let m = √(41.5)
	printf("f: %d, g: %d, m: %f, argv[0]: %s\n", f, g, m, x)

	// let a: (Int, Int) = (0, 0)
	// let b: (Int, Int) = (5, 6)

	// let tuple = lengthBetween((0, 0), (5, 6))


	// let i = "你好！你妈妈"
	// printf("%d, %s, (%.2f)\n", i.length, i.data, tuple)


	return 0
}








