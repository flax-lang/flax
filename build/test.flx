// test.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation
import Utilities
import String

import tests.fizzbuzz
import tests.recursiveFib
import tests.scopes
import tests.operators
import tests.arraytest
import tests.generics
import tests.limits
import tests.defertest		// workaround: defer is a keyword
import tests.misc
import tests.anytest
import tests.slices
import tests.decomposition
import tests.forloops

import tests.functions



fn runTests()
{
	// fib
	let fibTitle		= "       *** FIBONACII SEQUENCE ***       \n"
	let fizzbuzzTitle	= "            *** FIZZBUZZ ***            \n"
	let intLimitsTitle	= "       *** PRINTING INT LIMITS ***      \n"
	let scopeTitle		= "*** SCOPE RESOLUTION REGRESSION TEST ***\n"
	let operatorTitle	= " *** OPERATOR/TUPLE REGRESSION TEST *** \n"
	let arrayTitle		= "      *** ARRAY REGRESSION TEST ***     \n"
	let genericsTitle	= "    *** GENERICS REGRESSION TEST ***    \n"
	let functionsTitle	= "    *** FUNCTION REGRESSION TEST ***    \n"
	let deferTitle		= "       *** DEFER SEMANTICS TEST ***     \n"
	let anyTitle		= "        *** ANY SEMANTICS TEST ***      \n"
	let slicesTitle		= "     *** SLICES REGRESSION TEST ***     \n"
	let decomposeTitle	= " *** DECOMPOSITION REGRESSION TEST ***  \n"
	let forLoopTitle	= "    *** FOR LOOP REGRESSION TEST ***    \n"
	let miscTitle		= "       *** MISCELLANEOUS TESTS ***      \n"
	let thinLine		= "----------------------------------------\n"
	let endTitle		= "============ TESTS COMPLETE ============\n"


	printf("%s%s", fibTitle, thinLine)
	do {
		var n = 1
		while n < 20
		{
			printf("%lld", doRecursiveFib(n))
			n += 1

			if n != 20
			{
				printf(", ")
			}
		}
		printf("\n\n\n")
	}


	// fizzbuzz
	printf("%s%s", fizzbuzzTitle, thinLine)
	doFizzBuzz(15)
	printf("\n\n\n")


	// int limits
	printf("%s%s", intLimitsTitle, thinLine)
	printIntegerLimits()
	printf("\n\n\n")


	// scopes
	printf("%s%s", scopeTitle, thinLine)
	doScopeTest("__llvm_jit__build/test")
	printf("\n\n\n")


	// operators and tuples (vectors type, mainly)
	printf("%s%s", operatorTitle, thinLine)
	doOperatorTupleTest()
	printf("\n\n\n")


	// arrays
	printf("%s%s", arrayTitle, thinLine)
	doArrayTest()
	printf("\n\n\n")


	// generics
	printf("%s%s", genericsTitle, thinLine)
	doGenericsTest()
	printf("\n\n\n")


	// first-class-functions
	printf("%s%s", functionsTitle, thinLine)
	doFunctionTest()
	printf("\n\n\n")


	// defer semantics
	printf("%s%s", deferTitle, thinLine)
	doDeferTest()
	printf("\n\n\n")


	// any
	printf("%s%s", anyTitle, thinLine)
	doAnyTest()
	printf("\n\n\n")


	// slices
	printf("%s%s", slicesTitle, thinLine)
	doSlicesTest()
	printf("\n\n\n")


	// decomposition
	printf("%s%s", decomposeTitle, thinLine)
	doDecompositionTest()
	printf("\n\n\n")


	// for-loops
	printf("%s%s", forLoopTitle, thinLine)
	doForLoopTest()
	printf("\n\n\n")





	// misc tests
	printf("%s%s", miscTitle, thinLine)
	miscellaneousTests()
	printf("\n\n\n")



	// fin.
	printf("%s\n\n\n\n\n", endTitle)
}





// name idea: mill




public fn main(argc: i32, argv: i8**) -> int
{
	runTests()


	printf("\n<< done >>\n")
	return 0
}















	// do {
	// 	// println("Hello, {%}. This is world {%}, version {%, precision: 2}. {%}.", "World", 2, 3.71, "Goodbye")


	// 	let arr = [ 1, 2, 3, 4, 5 ]
	// 	let k = arr as int*

	// 	printf("pi = %.5f, %s, %#x, %d\n", Math.Ï€(), "foo", k, k[2])

	// 	// println("%b", "a" != "b")

	// 	parseFormatOptions("{401:x}")
	// }

	// while false {
	// }



	/*
		implementation notes

		1. a lot of places in the codegen need to account for the possibility of 'trying' -- like the scope resolution above, we need to
			be able to 'fail' safely when the static scope can't be found, so we can continue elsewhere

			eg. 'tryResolveVariableReference'

			everything is quite messy in this regard -- everything handles its own errors.

		2. speaking of which, might want to revamp how error handling works.
			while something like error("lol") might seem decent, as above, we might need a way to fail. maybe an error list that's pushed
			to? eg. `pushError("lol")`... someone needs to check that list, which might become haphazard. bad things are coming to my mind now,
			like asynchronous checking (running a separate thread) but that's a Bad Idea (tm).

			probably just stick to a normal error() routine for now. most of them would not allow continued codegen or any form of recovery
			that we care about anyway.

			it does lead to the situation of needing to fix errors one-by-one in a edit-compile-test cycle, but if you're doing things where
			you expect 102841 errors the first time, instead of maybe 4, you're doing some shit wrongly, and you're not welcome here.

			besides, compounded errors caused by previous errors (read - missing parens/semicolons/whatever in C/C++) would just clutter
			everything -- it's more useful to stop at the first error.
	*/





	// operator overloading notes:
	// top-level operators need to stay
	// method operators need to stay
	// protocols can dictate needing operators
	//
	// protocols first check the class and any extensions to see if the operator is defined
	// that's it...
	//
	// top level operators secretly create an extension on the type to the left, and make a method instead.
	// this way, protocol resolution can just check the extensions without having to bother with looking at
	// top-level functions.
	//
	// basically, top-level operators will just be syntactic sugar for extensions defining operators.


	// structs vs classes
	// structs:
	// methods. members. no intialisers.
	// extensions cannot have initialisers or stored properties
	// can conform to protocols.
	// vtable handling is done by having global vtable per type. for structs these are immutable.
	// looked up via type id.

	// classes:
	// everything. methods, members, properties, initialisers.
	// vtable is stored *in object*.
	// can be copied and modified at runtime for shits and giggles.




	// note: when we get protocol types working
	// eg. let x = String()
	// func foo(x: SomeProtocol) { ... }
	// foo(x)
	//
	// comparing fir::Type pointers isn't going to work any more.



	// todo: look into these.

	// >>> universal function call syntax -- use dot-operator calling on everything.
	// 	1. when you try to call a.b(c, ...), the usual "find a function named b in a" takes place
	// 	2. if nothing in c matches b (or c is not a compound type), use UFCS.
	// 		-> search for a function b(a, c, ...). if it exists, call it. if not, throw error as usual.

	// >>> multiple, dynamic dispatch









/*
	for arbitrary rc<T>, it's basically the same
	struct rc<T>
	{
		T* ptr
	}

	exactly the same; refcount is a 64-bit number stored 8 bytes before where ptr points
	to access it, same thing, cast ptr to an i64*, then subtract 1 with ptr arith.


	note: the things above will be done at the llvm level. for strings at least, we'll retain the FIR instructions for
	accessing data, len and refcount. At the llvm level, data and len will still be struct GEPs, but refcount will do some
	pointer magic. not a big deal


	for rc<T>, it's likely that it'll be a fir::Type, like fir::StringType, with an elementType. in which case, it should be similarly
	easy to set up the actual work at the llvm level. the type of refcount is always i64, so that shouldn't be a problem for the type
	system to handle.

	at the llvm level, rc<T> just gets converted to an appropriate struct type. the types are all concrete, so we can just do the
	same trick as with the strings.

	ezpz.

	this time, i'll stop doing stupid things.
*/


// ` = 3



/*
	wtf:

	llvm has extractvalue and insertvalue instructions that can get member fields from non-pointer structs
	i feel cheated.
*/



/*
	more string stuff:

	the current string type stays as it is -- unicode agnostic, doesn't care what you put inside.
	only knows about bytes, nothing else.

	a new type, ustring/utfstring/utf8string

	utf8string would store a series of utf8 bytes
	basically how the old one worked.
	indexing would take O(n), codepoint length has to be recomputed on modify, to account for combining characters
	everything else basically works the same as string?

	utf32string, or maybe just utfstring, stores a series of 4-byte codepoints
	aka utf-32.

	everything works like normal strings, except with 4x the storage requirements
	faster than utf8 on things like indexing, appending
	basically space/speed tradeoff here

	still, normal string is best string
	these unicode things will be quite far into the future i think.
*/










/*

struct FormatOptions
{
	var paddingChar: char
	var precision: i64
	var width: i64
	var paddingKind: i64			// 0 = left, 1 = centre, 2 = right
	var type: string
	var argNum: i64
}

namespace thing
{
	var xxx = 40
}

var yyy = 30

fn parseFormatOptions(str: string) -> FormatOptions
{
	let colon: char		= ":"
	let lbrace: char	= "{"
	let rbrace: char	= "}"

	let lettero: char	= "o"
	let letterx: char	= "x"
	let letterX: char	= "X"
	let letterp: char	= "p"
	let letterb: char	= "b"

	let larrow: char	= "<"
	let rarrow: char	= ">"
	let caret: char		= "^"

	let plus: char		= "+"
	let pound: char		= "#"
	let zero: char		= "0"
	let period: char	= "."

	var ret: FormatOptions


	if str.length < 1 || str[0] != lbrace
	{
		programExit("wtf")
		return ret
	}

	// skip the first.

	let cc = str[1]

	if cc.isDigit()
	{
		var argnum: string
		var i = 1

		while i < str.length && str[i].isDigit()
		{
			argnum += str[i]
			i += 1
		}

		printf("string = %s", argnum)
	}



	printf("\n")

	return ret
}
*/




















