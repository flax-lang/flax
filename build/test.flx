// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation
import tests.fizzbuzz
import tests.recursiveFib
import tests.scopes
import tests.arraytest
import tests.generics

import Utilities

ƒ runTests()
{
	// fib
	printf("*** FIBONACII SEQUENCE ***\n")

	var n = 0
	while n < 20
	{
		printf("%d: %lld\n", n, doRecursiveFib(n))
		n += 1
	}
	printf("\n\n");


	// fizzbuzz
	printf("*** FIZZBUZZ ***\n")
	doFizzBuzz(20);
	printf("\n\n");


	// scopes
	printf("*** SCOPE RESOLUTION REGRESSION TEST ***\n")
	doScopeTest("__llvm_jit__build/test")
	printf("\n\n");


	// arrays
	printf("*** ARRAY REGRESSION TEST ***\n")
	doArrayTest()
	printf("\n\n")


	printf("*** STRING TEST ***\n")
	someFunc(@raw "SOME STRING" as String)
	printf("\n\n")



	printf("*** GENERICS TEST ***\n")
	doGenericsTest()
	printf("\n\n")
}



struct Foo
{
	var _bar: Int = 537
	var bar: Int
	{
		get
		{
			return self._bar
		}
		set
		{
			self._bar = newValue
		}
	}

	ƒ doBar() -> Int
	{
		printf("in foo\n")

		return self._bar
	}
}

struct Bar : Foo
{
	override var bar: Int
	{
		get
		{
			return 73
		}
		set
		{
			// super.bar = newValue
		}
	}

	override ƒ doBar()
	{
		printf("in bar\n")
	}

	var foo = 73
}


struct Sheep
{
	var thing = 43
	var foo: Foo

	static var afoo: Foo
}

namespace n1
{
	namespace n2
	{
		var m: Sheep

		// todo: not supported in compiler
		var tup: (String, Int)
		func nest() -> (String, Int)
		{
			printf("nested\n");
			return ("TUPLE ONE", 591)
		}
	}
}

func main(argc: Int32, argv: Int8**) -> Int
{
	// runTests()
	printf("========= TESTS COMPLETE =========\n\n")


	n1.n2.m.foo._bar = 968

	let t1 = n1.n2.m.foo.doBar()
	let t2 = n1.n2.nest().0.length

	n1.n2.tup.0 = "HELLO, WORLD"
	printf("tup: %s\n", n1.n2.tup.0)


	printf("t1 = %d, t2 = %d\n", t1, t2)
	printf("afoo: %d\n", Sheep.afoo.doBar())

	return 0
}




























