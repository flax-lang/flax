// test.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Foundation

var m = 40

namespace Thing.Troll
{
	func test()
	{
		return
	}

	struct Floby
	{
		var haha: Int = 691
		init(d: Int)
		{
			self.haha = d
		}
		init()
		{
		}
		func food() -> Int
		{
			return 1058
		}
	}
}

struct Bar
{
	var norf: Int = 1600
	var yorg: Int = 5000
	var goop: Int = 6810
	init(q: Int, a: Int)
	{
		self.qux = q
		self.aaa = a
	}
}

extension Bar
{
	var qux: Int = 500
	var aaa: Int = 1000

	init()
	{
		self.init(100, 300)
	}

	func fwoosh()
	{
		printf("Fwoosh! The joke goes over your head.\n");
	}

	var poog: Int
	{
		get
		{
			return 500
		}
		set(fag)
		{
			self.norf = fag / 4
		}
	}
}

enum Fac
{
	case Ares
	case Apollo
	case Artemis
	case Athena
}


struct sa
{
	var d: Int = 500
}

struct sb
{
	var d: Int = 300
}

func fac(x: Fac) { printf("[%d]\n", x) }
func fad(x: aBar) { printf("[%d, %d]\n", x.qux, x.aaa) }

typealias aBar = Bar


func mult(x: Int) -> Int { x * 2 }
func main(argc: Int32, argv: Int8**) -> Int
{
	var d = 100
	var e = Fac.Apollo
	fac(e)


	var k: sa
	var c = #(&k as sb*)


	var b: aBar
	fad(b)


	var j = m

	printf("%d, %d\n", c.d, j)

	return 0
}
























namespace Kernel
{
	ffi(cpp) func GetFramebufferAddress() -> Uint64
	ffi(cpp) func GetTrueLFBAddress() -> Uint64

	namespace HardwareAbstraction {
	namespace Devices
	{
		namespace SerialPort
		{
			ffi(cpp) func WriteChar(ch: Uint8)
		}
	}

	namespace VideoOutput
	{
		namespace LinearFramebuffer
		{
			ffi(cpp) func GetResX() -> Uint16
			ffi(cpp) func GetResY() -> Uint16

			ffi(cpp) func DrawChar(c: Uint8, x: Uint16, y: Uint16, Colour: Uint32)
		}

		namespace Console80x25
		{
			ffi(cpp) func ClearScreen(Colour: Uint8)
			ffi(cpp) func PrintChar(Char: Uint8)
		}
	}
	}
}

namespace Memory
{
	ffi(cpp) func Set(Dest: Uint8*, Value: Uint8, Length: Uint64) -> Uint8*
	ffi(cpp) func Copy(Dest: Uint8*, Source: Uint8*, Length: Uint64) -> Uint8*
	ffi(cpp) func CopyOverlap(Dest: Uint8*, Source: Uint8*, Length: Uint64) -> Uint8*
}

namespace Kernel {
namespace Console
{
	private val CharWidth		= 9
	private val CharHeight		= 16
	private val BitsPerPixel	= 32

	private var VT_CursorX: Uint
	private var VT_CursorY: Uint

	private var CharsPerPage: Uint
	private var CharsPerLine: Uint
	private var CharsPerColumn: Uint

	private var VT_Colour: Uint32 = 0xFFFFFFFF
	private var VT_DidInit: Bool = false

	private val OffsetLeft: Uint16 = 4
	private val SERIALMIRROR: Bool = true

	public func Initialise()
	{
		CharsPerLine = (Kernel.Console.GetResX() - OffsetLeft) / CharWidth - 1
		CharsPerPage = CharsPerLine * (Kernel.Console.GetResY() / CharHeight) - 1
		CharsPerColumn = CharsPerPage / CharsPerLine

		VT_DidInit = true
	}

	public func IsInitialised() -> Bool
	{
		return VT_DidInit
	}

	private func GetResX() -> Uint16
	{
		return Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.GetResX()
	}

	private func GetResY() -> Uint16
	{
		return Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.GetResY()
	}

	public func PrintChar(c: Uint8)
	{
		if c == 0
		{
			return
		}

		if SERIALMIRROR
		{
			Kernel.HardwareAbstraction.Devices.SerialPort.WriteChar(c)
		}

		if !IsInitialised()
		{
			Kernel.HardwareAbstraction.VideoOutput.Console80x25.PrintChar(c)
			return
		}

		// AutoMutex lk = AutoMutex(mtx);


		val CH_space: Uint8		= 0x20
		val CH_carReturn: Uint8	= 0x0D
		val CH_backspace: Uint8	= 0x08

		if c == CH_carReturn
		{
			VT_CursorX = 0
			return
		}
		else if c == CH_backspace
		{
			if VT_CursorX > 0
			{
				VT_CursorX -= 1

				val tmp1: Uint16 = ((VT_CursorX as Uint16) * (CharWidth as Uint16)) + (OffsetLeft as Uint16)
				val tmp2: Uint16 = (VT_CursorY as Uint16) * (CharHeight as Uint16)

				Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.DrawChar(CH_space, tmp1, tmp2, VT_Colour)
			}
			else if VT_CursorY > 0
			{
				VT_CursorX = CharsPerLine - 1
				VT_CursorY -= 1

				val tmp1: Uint16 = ((VT_CursorX as Uint16) * (CharWidth as Uint16)) + (OffsetLeft as Uint16)
				val tmp2: Uint16 = (VT_CursorY as Uint16) * (CharHeight as Uint16)

				Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.DrawChar(CH_space, tmp1, tmp2, VT_Colour)
			}

			return;
		}

		if VT_CursorY == CharsPerColumn && VT_CursorX == CharsPerLine
		{
			// Reached end of line and no more space below
			VT_CursorX = 0
			ScrollDown(1)

			if c == 0xA || c == 0x9
			{
				ScrollDown(1)
				VT_CursorX = 0

				return
			}


			val tmp1: Uint16 = ((VT_CursorX as Uint16) * (CharWidth as Uint16)) + (OffsetLeft as Uint16)
			val tmp2: Uint16 = (VT_CursorY as Uint16) * (CharHeight as Uint16)
			Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.DrawChar(c, tmp1, tmp2, VT_Colour)
			VT_CursorX += 1

		}
		else if (VT_CursorX * CharWidth) >= (Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.GetResX() - 10)
		{
			// Reached end of line
			VT_CursorX = 0
			VT_CursorY += 1

			val tmp1: Uint16 = ((VT_CursorX as Uint16) * (CharWidth as Uint16)) + (OffsetLeft as Uint16)
			val tmp2: Uint16 = (VT_CursorY as Uint16) * (CharHeight as Uint16)
			Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.DrawChar(c, tmp1, tmp2, VT_Colour)
			VT_CursorX = 1
		}
		else
		{
			if c == 0xA
			{
				if VT_CursorY < CharsPerColumn
				{
					VT_CursorX = 0
					VT_CursorY += 1
				}
				else
				{
					VT_CursorX = 0
					ScrollDown(1)
				}

				return
			}
			else if c == 0x9
			{
				if( ((VT_CursorX + 4) & (~(4 - 1))) < CharsPerLine)
				{
					VT_CursorX = (VT_CursorX + 4) & (~(4 - 1))
				}
				else
				{
					VT_CursorX = 0
					if VT_CursorY < CharsPerColumn
					{
						VT_CursorY += 1
					}
					else
					{
						ScrollDown(1)
					}
				}

				return
			}

			// Normal printing
			val tmp1: Uint16 = ((VT_CursorX as Uint16) * (CharWidth as Uint16)) + (OffsetLeft as Uint16)
			val tmp2: Uint16 = (VT_CursorY as Uint16) * (CharHeight as Uint16)
			Kernel.HardwareAbstraction.VideoOutput.LinearFramebuffer.DrawChar(c, tmp1, tmp2, VT_Colour)
			VT_CursorX += 1
		}

		return
	}

	public func ClearScreen()
	{
		var fb: Uint64 = Kernel.GetFramebufferAddress()
		val zero: Uint8 = 0
		Memory.Set(fb as Uint8*, zero, Kernel.Console.GetResX() * Kernel.Console.GetResY() * 4)
		// Memory.Set(Kernel.GetTrueLFBAddress() as Uint8*, 0x00, Kernel.Console.GetResX() * Kernel.Console.GetResY() * 4)
		VT_CursorX = 0
		VT_CursorY = 0
	}

	public func Scroll()
	{
		var x = GetResX()
		var y = GetResY()

		// copy up.
		val fb: Uint64 = Kernel.GetFramebufferAddress()
		val zero: Uint8 = 0
		Memory.Copy(fb as Uint8*, (fb + (x * CharHeight * (BitsPerPixel / 8))) as Uint8*,
			(x * y * (BitsPerPixel / 8)) - (x * CharHeight * (BitsPerPixel / 8)))

		// delete the last line.
		Memory.Set((fb + ((x * y * (BitsPerPixel / 8)) - (x * CharHeight * (BitsPerPixel / 8)))) as Uint8*,
			zero, (x * CharHeight * (BitsPerPixel / 8)))
	}

	public func ScrollDown(_lines: Uint64)
	{
		var lines = _lines
		while lines > 0
		{
			Scroll()
			lines -= 1
		}

		return
	}


	public func Backspace(_characters: Uint64)
	{
		var characters = _characters
		while characters > 0
		{
			// PrintChar(0x8)
			characters -= 1
		}
	}

	public func SetColour(Colour: Uint32)
	{
		VT_Colour = Colour
	}

	public func GetColour() -> Uint32
	{
		return VT_Colour
	}

	public func MoveCursor(x: Uint16, y: Uint16)
	{
		if x <= CharsPerLine && y <= CharsPerColumn
		{
			VT_CursorX = x
			VT_CursorY = y
		}
	}

	public func GetCharsPerLine() -> Uint16
	{
		return CharsPerLine as Uint16
	}

	public func GetCharsPerColumn() -> Uint16
	{
		return CharsPerColumn as Uint16
	}

	public func GetCharsPerPage() -> Uint16
	{
		return CharsPerPage as Uint16
	}

	public func GetCursorX() -> Uint16
	{
		return VT_CursorX
	}

	public func GetCursorY() -> Uint16
	{
		return VT_CursorY
	}
}
}



