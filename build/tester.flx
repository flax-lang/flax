// tester.flx
// Copyright (c) 2014 - 2017, zhiayang
// Licensed under the Apache License Version 2.0.

export tester

import libc
import std::io
import std::limits

import "tests/fizzbuzz.flx"
import "tests/recursiveFib.flx"
import "tests/slices.flx"
import "tests/classes.flx"
import "tests/scopes.flx"
import "tests/defertest.flx"
import "tests/anytest.flx"
import "tests/decomposition.flx"
import "tests/intlimits.flx"
// import "tests/generics.flx"
// import "tests/linkedlist.flx"
// import "tests/forloops.flx"
// import "tests/arraytest.flx"
// import "tests/functions.flx"
// import "tests/unions.flx"
// import "tests/using.flx"

fn runTests()
{
	// fib
	let fibTitle        = "       *** FIBONACII SEQUENCE ***       \n"
	let fizzbuzzTitle   = "            *** FIZZBUZZ ***            \n"
	let intLimitsTitle  = "       *** PRINTING INT LIMITS ***      \n"
	let scopeTitle      = "*** SCOPE RESOLUTION REGRESSION TEST ***\n"
	let operatorTitle   = " *** OPERATOR/TUPLE REGRESSION TEST *** \n"
	let arrayTitle      = "      *** ARRAY REGRESSION TEST ***     \n"
	let genericsTitle   = "    *** GENERICS REGRESSION TEST ***    \n"
	let functionsTitle  = "    *** FUNCTION REGRESSION TEST ***    \n"
	let classTitle      = "      *** CLASS REGRESSION TEST ***     \n"
	let deferTitle      = "       *** DEFER SEMANTICS TEST ***     \n"
	let anyTitle        = "        *** ANY SEMANTICS TEST ***      \n"
	let slicesTitle     = "     *** SLICES REGRESSION TEST ***     \n"
	let decomposeTitle  = " *** DECOMPOSITION REGRESSION TEST ***  \n"
	let forLoopTitle    = "    *** FOR LOOP REGRESSION TEST ***    \n"
	let linkedListTitle = "        *** LINKED LIST TEST ***        \n"
	let unionsTitle     = "           *** UNIONS TEST ***          \n"
	let usingTitle      = "           *** USING TEST ***           \n"
	let miscTitle       = "       *** MISCELLANEOUS TESTS ***      \n"
	let thinLine        = "----------------------------------------\n"
	let endTitle        = "============ TESTS COMPLETE ============\n"


	std::io::print("%%", fibTitle, thinLine)
	do {
		var n = 1
		while n < 20
		{
			std::io::print("%", test_fib::doRecursiveFib(n))
			n += 1

			if n != 20
			{
				std::io::print(", ")
			}
		}
		std::io::print("\n\n\n")
	}

	// fizzbuzz
	std::io::print("%%", fizzbuzzTitle, thinLine)
	test_fizz::doFizzBuzz(15)
	std::io::print("\n\n\n")


	// int limits
	std::io::print("%%", intLimitsTitle, thinLine)
	test_limits::printIntegerLimits()
	std::io::print("\n\n\n")


	// scopes
	std::io::print("%%", scopeTitle, thinLine)
	test_scopes::doScopeTest("__llvm_jit__build/test")
	std::io::print("\n\n\n")


	// operators and tuples (vectors type, mainly)
	std::io::print("%%", operatorTitle, thinLine)
	// doOperatorTupleTest()
	std::io::print("\n\n\n")


	// arrays
	std::io::print("%%", arrayTitle, thinLine)
	// test_arrays::doArrayTest()
	std::io::print("\n\n\n")


	// generics
	std::io::print("%%", genericsTitle, thinLine)
	// test_generics::doGenericsTest()
	std::io::print("\n\n\n")


	// classes
	std::io::print("%%", classTitle, thinLine)
	// test_classes::doClassTest()
	std::io::print("\n\n\n")


	// first-class-functions
	std::io::print("%%", functionsTitle, thinLine)
	// test_functions::doFunctionTest()
	std::io::print("\n\n\n")


	// defer semantics
	std::io::print("%%", deferTitle, thinLine)
	// test_defer::doDeferTest()
	std::io::print("\n\n\n")


	// any
	std::io::print("%%", anyTitle, thinLine)
	// test_any::doAnyTest()
	std::io::print("\n\n\n")


	// slices
	std::io::print("%%", slicesTitle, thinLine)
	// test_slices::doSlicesTest()
	std::io::print("\n\n\n")


	// decomposition
	std::io::print("%%", decomposeTitle, thinLine)
	// test_decomposition::doDecompositionTest()
	std::io::print("\n\n\n")


	// for-loops
	std::io::print("%%", forLoopTitle, thinLine)
	// test_forloops::doForLoopTest()
	std::io::print("\n\n\n")


	// linked-list (generics)
	std::io::print("%%", linkedListTitle, thinLine)
	// test_linkedlist::doLinkedListTest()
	std::io::print("\n\n\n")


	// unions (generics)
	std::io::print("%%", unionsTitle, thinLine)
	// test_unions::doUnionsTest()
	std::io::print("\n\n\n")


	// using
	std::io::print("%%", usingTitle, thinLine)
	// test_using::doUsingTest()
	std::io::print("\n\n\n")


	// misc tests
	std::io::print("%%", miscTitle, thinLine)
	// miscellaneousTests()
	std::io::print("\n\n\n")



	// fin.
	std::io::print("%\n\n\n\n\n", endTitle)
}





ffi fn __global_init_function__() -> void
@nomangle fn test_entry_point()
{
	__global_init_function__()
	main(0, null)
}


@entry fn main(argc: i32, argv: &&i8) -> int
{
	runTests()


	std::io::print("\n<< done >>\n")
	return 0
}







