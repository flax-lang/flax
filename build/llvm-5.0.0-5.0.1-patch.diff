Index: include/llvm/ADT/STLExtras.h
===================================================================
--- include/llvm/ADT/STLExtras.h
+++ include/llvm/ADT/STLExtras.h
@@ -57,7 +57,10 @@
 //===----------------------------------------------------------------------===//

 template<class Ty>
-struct identity : public std::unary_function<Ty, Ty> {
+struct identity {
+  typedef Ty argument_type;
+  typedef Ty result_type;
+
   Ty &operator()(Ty &self) const {
     return self;
   }
@@ -67,14 +70,22 @@
 };

 template<class Ty>
-struct less_ptr : public std::binary_function<Ty, Ty, bool> {
+struct less_ptr {
+  typedef Ty first_argument_type;
+  typedef Ty second_argument_type;
+  typedef bool result_Type;
+
   bool operator()(const Ty* left, const Ty* right) const {
     return *left < *right;
   }
 };

 template<class Ty>
-struct greater_ptr : public std::binary_function<Ty, Ty, bool> {
+struct greater_ptr {
+  typedef Ty first_argument_type;
+  typedef Ty second_argument_type;
+  typedef bool result_Type;
+
   bool operator()(const Ty* left, const Ty* right) const {
     return *right < *left;
   }
Index: include/llvm/CodeGen/LatencyPriorityQueue.h
===================================================================
--- include/llvm/CodeGen/LatencyPriorityQueue.h
+++ include/llvm/CodeGen/LatencyPriorityQueue.h
@@ -22,7 +22,11 @@
   class LatencyPriorityQueue;

   /// Sorting functions for the Available queue.
-  struct latency_sort : public std::binary_function<SUnit*, SUnit*, bool> {
+  struct latency_sort {
+    typedef SUnit* first_argument_type;
+    typedef SUnit* second_argument_type;
+    typedef bool result_Type;
+
     LatencyPriorityQueue *PQ;
     explicit latency_sort(LatencyPriorityQueue *pq) : PQ(pq) {}

Index: include/llvm/CodeGen/MachineBasicBlock.h
===================================================================
--- include/llvm/CodeGen/MachineBasicBlock.h
+++ include/llvm/CodeGen/MachineBasicBlock.h
@@ -762,8 +762,10 @@
 raw_ostream& operator<<(raw_ostream &OS, const MachineBasicBlock &MBB);

 // This is useful when building IndexedMaps keyed on basic block pointers.
-struct MBB2NumberFunctor :
-  public std::unary_function<const MachineBasicBlock*, unsigned> {
+struct MBB2NumberFunctor {
+  typedef const MachineBasicBlock* argument_type;
+  typedef unsigned result_type;
+
   unsigned operator()(const MachineBasicBlock *MBB) const {
     return MBB->getNumber();
   }
Index: include/llvm/CodeGen/ResourcePriorityQueue.h
===================================================================
--- include/llvm/CodeGen/ResourcePriorityQueue.h
+++ include/llvm/CodeGen/ResourcePriorityQueue.h
@@ -28,7 +28,11 @@
   class ResourcePriorityQueue;

   /// Sorting functions for the Available queue.
-  struct resource_sort : public std::binary_function<SUnit*, SUnit*, bool> {
+  struct resource_sort {
+    typedef SUnit* first_argument_type;
+    typedef SUnit* second_argument_type;
+    typedef bool result_type;
+
     ResourcePriorityQueue *PQ;
     explicit resource_sort(ResourcePriorityQueue *pq) : PQ(pq) {}

Index: include/llvm/IR/Instructions.h
===================================================================
--- include/llvm/IR/Instructions.h
+++ include/llvm/IR/Instructions.h
@@ -4195,11 +4195,10 @@
   }

 public:
-  using DerefFnTy = std::pointer_to_unary_function<Value *, BasicBlock *>;
+  typedef BasicBlock* (*DerefFnTy)(Value *);
   using handler_iterator = mapped_iterator<op_iterator, DerefFnTy>;
   using handler_range = iterator_range<handler_iterator>;
-  using ConstDerefFnTy =
-      std::pointer_to_unary_function<const Value *, const BasicBlock *>;
+  typedef const BasicBlock* (*ConstDerefFnTy)(const Value *);
   using const_handler_iterator =
       mapped_iterator<const_op_iterator, ConstDerefFnTy>;
   using const_handler_range = iterator_range<const_handler_iterator>;
Index: include/llvm/Target/TargetRegisterInfo.h
===================================================================
--- include/llvm/Target/TargetRegisterInfo.h
+++ include/llvm/Target/TargetRegisterInfo.h
@@ -1114,7 +1114,10 @@
 };

 // This is useful when building IndexedMaps keyed on virtual registers
-struct VirtReg2IndexFunctor : public std::unary_function<unsigned, unsigned> {
+struct VirtReg2IndexFunctor {
+  typedef unsigned argument_type;
+  typedef unsigned result_type;
+
   unsigned operator()(unsigned Reg) const {
     return TargetRegisterInfo::virtReg2Index(Reg);
   }
