// issues.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


// NOTE: this file *SHOULD NOT* be compiled, at least until all the 'TOFIX'es have been moved to the
// 'FIXED' section.


// note: this issues system is some kind of shitty queue
// queue numbers are recycled, but issues are not moved forward in the queue (ie. their numbers are not decremented)
// more urgent issues are placed in front to reuse lower queue numbers

// ^ why am i documenting this?



//
// TOFIX:
//




// 8. abort(), exit(), etc. should be allowed as the last expression in a function
// 	and allow the compiler to just ignore the fact that there's no return value
// 	ie. __attribute__((noreturn))
fn foo() -> int { abort() }




// 10. wider use of type-inference leveraging the generic type solver's capabilities




// 14. class instance method access should capture the instance
// the call to fn() should not require explicit passing of the instance, but rather it should refer to the 'f' instance.
// Foo.method would continue to work, but would require an instance.

// note: we should probably wait until we have closure capabilities in the compiler, which we can leverage to implement this.
class Foo { fn method() { /* ... */ } }
Foo foo
let f = foo.method
f()




// 17. pass overloaded functions around more seamlessly. currently does not work when passing to generic functions,
// since we don't have the type to verify against. unsure of how to proceed.




// 18. things defined inside functions may or may not leak into their overloaded colleagues.
// this is a side-effect of the namespace simply being the common name of the top function.
// needs more testing.




//
// FIXED
//
/*
	(fixed in e664992)
	- enums declared in functions do not work
	- global variables outside of namespaces don't work

	(fixed in bb6baf0)
	- handle refcounts when doing slices

	(added in e7c50a0)
	- dynamic array slices

	(fixed in 42b1aaf)
	- assign [] to dynamic arrays
	- pass [] to functions taking dynamic arrays

	(fixed in 9334be3)
	- do { } while { } parsing bug

	(fixed in dc63839)
	- T.0.1 parses as T. (0.1) where 0.1 is a number

	(fixed in d9f8d4b)
	- defer does not happen after the return, only before

	(fixed in 61325cd)
	- shit like this works "let g = 3let v = 10"

	(fixed in 6d31d14)
	- remove implicit returns, unless the function has exactly one *statement*.

	(fixed in 3edc6f5)
	- removed literal types

	(added in b56ef9c)
	- init+cond in if statements, a-la c++17

	(added in 63ba763)
	- for loops, ranges, for-in loops

	(fixed in 586c963)
	- empty array literals are now generic things (WIP)
	- iterative generic solver is now used for everything
	- the fucking generic type solver is hopefully finished

	(fixed in 930bfa3)
	- add automatic == and != for structs, using memcmp.
*/


//
// TO TEST
//
/*
	1. tuple operators
	2. array of strings
*/


//
// TODO
//
/*
	3. splatting (http://coffeescript.org/#splats)

	4. clean up typechecking
		-- store the fir::Type of each AST node
		-- recursively visit each node to get its type before anything happens

	5. arbitrary refcounted types (ie. rc<T>)
		recent work with 'any' has demonstrated that it's *somewhat trivial* to add a new refcounted type to the type system. The real
		challenge is not in making it refcounted, it's simply in integrating it with the rest of the type system (in terms of operator
		results, compares, special-cases, etc.)
*/






