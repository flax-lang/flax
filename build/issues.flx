// issues.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

/*
 * This file isn't meant to be compiled.
 * It's just a list of outstanding issues in the compiler that we've yet to get to.

 ? Note that some issues existed pre-rewrite, so they may not make sense. The 'fixed' log has not been
 ? updated to reflect problems that were fixed in the process of the rewrite, for obvious reasons.
*/

/*
	! FEATURES TO IMPLEMENT

	1. Constructor syntax for types


	5. String operators


	6. Ranges


	7. Defer


	9. For loops


	10. Decomposition


	11. Splatting single value into decomposition declaration
		eg. let (a, b) = ...10   <-- a == b == 10


	12. Operator overloading


	13. Generic functions & types


	14. Multi-dimensional arrays, as opposed to our current 'array-of-arrays' approach
		eg. index with 'foo[a, b, c]' instead of 'foo[a][b][c]'


	15. Fix deallocating array of arrays.


	16. [[noreturn]] for functions, so we don't error when no value is returned (eg. when calling abort())

*/



/*
	? THINGS TO INVESTIGATE

	1. Should slices be a 'weak' reference to the elements?
		ie. should making a slice of a dynamic array increase the refcount of the elements of the dynamic array?
		Right now, we don't increment the reference count -- ie. we've implemented weak slices.

		Do we want strong slices?
*/





/*
	* FIXED ISSUES

	(fixed in 5be4db1)
	- fix runtime glue code for arrays wrt. reference counting

	(added in e3a2b55)
	- alloc and dealloc
	- dynamic array operators (pop(), back())

	(added in b7c6f74)
	- enums

	(added in 408260c4)
	- classes

	(fixed in e664992)
	- enums declared in functions do not work
	- global variables outside of namespaces don't work

	(fixed in bb6baf0)
	- handle refcounts when doing slices

	(added in e7c50a0)
	- dynamic array slices

	(fixed in 42b1aaf)
	- assign [] to dynamic arrays
	- pass [] to functions taking dynamic arrays

	(fixed in 9334be3)
	- do { } while { } parsing bug

	(fixed in dc63839)
	- T.0.1 parses as T. (0.1) where 0.1 is a number

	(fixed in d9f8d4b)
	- defer does not happen after the return, only before

	(fixed in 61325cd)
	- shit like this works "let g = 3let v = 10"

	(fixed in 6d31d14)
	- remove implicit returns, unless the function has exactly one *statement*.

	(fixed in 3edc6f5)
	- removed literal types

	(added in b56ef9c)
	- init+cond in if statements, a-la c++17

	(added in 63ba763)
	- for loops, ranges, for-in loops

	(fixed in 586c963)
	- empty array literals are now generic things (WIP)
	- iterative generic solver is now used for everything
	- the fucking generic type solver is hopefully finished

	(fixed in 930bfa3)
	- add automatic == and != for structs, using memcmp.
*/


/*
	! TODO

	3. splatting (http://coffeescript.org/#splats)

	5. arbitrary refcounted types (ie. rc<T>)
		recent work with 'any' has demonstrated that it's *somewhat trivial* to add a new refcounted type to the type system. The real
		challenge is not in making it refcounted, it's simply in integrating it with the rest of the type system (in terms of operator
		results, compares, special-cases, etc.)
*/






