// ultratiny.flx
// Copyright (c) 2019, zhiayang
// Licensed under the Apache License Version 2.0.

export ultratiny
import libc as _



struct foo<T>
{
	a: T

	fn method(x: T) -> T
	{
		if x > 0
		{
			var g: &self = &this
			printf(".")
			g.method(x - 1)
		}

		return a + x
	}

	fn method2<T>(x: T) -> T
	{
		return x + x
	}
}

class bar
{
	init() { }

	fn base()
	{
		printf("i am the base method\n")
	}
}

class qux<T> : bar
{
	init(x: T) : super() { }

	static fn foozle<T>(x: T)
	{
		printf("this is foozle %s\n", x)
	}

	// var lmao: T
}

fn lmao<T>(x: T)
{

}

fn lmao<T>(x: T, y: T)
{

}

fn rofl(x: int)
{

}

fn rofl(x: int, y: int)
{

}

@entry fn main()
{
	// let f = foo(a: 17)
	// let s = f.method2(5)

	// printf("s = %d\n", s)

	// let k = qux(x: 3)
	// k.base()

	lmao()
	// rofl()
}









































