// ultratiny.flx
// Copyright (c) 2019, zhiayang
// Licensed under the Apache License Version 2.0.

export ultratiny
import libc as _



struct foo
{
	a: int

	fn method(x: int) -> int
	{
		if x > 0
		{
			var g: &self = &this
			printf(".")
			g.method(x - 1)
		}

		return a + x
	}

	fn method2<T>(x: T) -> T
	{
		return x + x
	}
}

class bar
{
	init() { }

	fn base()
	{
		printf("i am the base method\n")
	}
}

class qux : bar
{
	init() : super() { }
}


fn f1() -> int => printf("f1\n")
fn f2() -> int => printf("f2\n")
fn f3() -> int => printf("f3\n")

fn swizzle(a: int, b: int, c: int)
{
}

@entry fn main()
{
	let f = foo(a: 17)
	let s = f.method(5)

	printf("s = %d\n", s)

	let k = qux()
	k.base()

	swizzle(c: f1(), b: f2(), a: f3())
}

















