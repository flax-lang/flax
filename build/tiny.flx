// tiny.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

ffi fn malloc(size: i64) -> i8*
ffi fn printf(fmt: i8*, ...) -> i32


class Array<T, K>
{
	var data: T*
	var data2: K*

	init(ptr: T*)
	{
		self.data = ptr
	}

	operator [] (index: i64) -> T
	{
		get { self.data[index] }
		set { printf("setting\n"); self.data[index] = value }
	}
}


// fn add<T>(a: T, b: T) -> T
// {
// 	a + b
// }

// fn test2<T>(a: Array<T: T>)
// {
// 	printf("typeid(T) = %d\n", typeid(T))
// }

// fn test<A, B>(a: Array<T: A>, b: Array<T: B>)
// {
// 	printf("typeid(T) = %d / %d / %d / %d\n", typeid(A), typeid(B), typeid(a), typeid(b))
// 	let x = Array<T: A>(null)

// 	test2(x)
// }

public fn main() -> int
{
	// do {
	// 	let c = add<T: i64>(30, 40)
	// 	printf("c = %d\n", c)
	// }

	// do {
	// 	let ptr = (alloc[60] i64).data
	// 	defer dealloc ptr

	// 	var list = Array<T: i64>(ptr)

	// 	ptr[0] = 37

	// 	// printf("x = %d\n", list[0])
	// 	list[1] = 401

	// 	// test(list, list)
	// }

	// do {
	// 	// let ptr = (alloc[60] string).data
	// 	// defer dealloc ptr

	// 	var list1 = Array<T: string>(null)
	// 	var list2 = Array<T: char>(null)
	// 	// list[3] = "foobar"

	// 	// printf("0 = '%s', 3 = '%s'\n", list[0], list[3])

	// 	test(list1, list2)
	// }

	do {
		var list = Array<T: string>(null)
		// list[0] = "hello"

		// printf("0 = %s\n", list[0])
	}


	return 0
}


// notes for next week and/or tomorrow:
/*
	add some implicit facilities via the init() call, if available
	obviously, if there's some other type parameter inside that isn't visible in the init() signature, we can't
	infer it (since we only look at declarations to infer), and so we'll complain. Simple as that.
*/









