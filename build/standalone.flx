// standalone.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


// import LibCInterface

ffi func printf(fmt: i8*, ...) -> i32

func map<T, R>(arr: T[], f: [(T) -> R]) -> R[]
{
	var i = 0
	var ret = alloc[arr.length] R
	while i < arr.length
	{
		ret[i] = f(arr[i])
		i += 1
	}

	return ret
}

func map<T, R>(arr: T[], f: [(T, int) -> R]) -> R[]
{
	var i = 0
	var ret = alloc[arr.length] R
	while i < arr.length
	{
		ret[i] = f(arr[i], 3)
		i += 1
	}

	return ret
}

func map2<T, K, R>(arr: (T, K)[], f: [(T, K) -> R]) -> R[]
{
	var i = 0
	var ret = alloc[arr.length] R
	while i < arr.length
	{
		ret[i] = f(arr[i].0, arr[i].1)
		i += 1
	}

	return ret
}


func incr(x: int) -> int { x + 1 }
func gmult<Q>(x: Q, m: Q) -> Q { x * m }
// func gmult<T>(x: (T, T)) -> T { x.0 * x.1 }

func add2<A, B>(x: A, y: B) -> A { x + y }






/*
	notes

	extension [] { }
	^ this extends all dynamic arrays

	extension T[]
	^ this extends dynamic arrays of type T

	presumably eventually we'll get generic types,
	so we need generic extensions to go with that.

	but dynamic arrays aren't "generic types" per-se, so we need something for it.

	lambdas:

	Î»(x: int, y: int) -> string => {

	}

	.\(x: int, y: int) -> int => {

	}


	todo: handle taking address of function
	todo: basic blocks need to check if they all have a terminator
*/




func tmpf<T>(x: T, y: T) -> T
{
	return x + y
}

func vartup<T, K, U>(f: [(T, T) -> K], y: (T, U)[...]) -> K[]
{
	var ret = alloc[y.length] K

	var i = 0
	while i < y.length
	{
		ret[i] = f(y[i].0, y[i].1)
		i += 1
	}

	return ret
}






class Str
{
	init(x: int, y: int) { self.a = x; self.b = y }
	var a: int
	var b: int
}


public func main()
{
	generictest()

	// let (a, (b, (c, d), e), f) = (10, (20, ("foo", "bar"), 3.1), 10.41)

	var _ = 30

	let x = Str(10, 20)
	let y = Str(10, 20)

	// printf("> %d\n", x == y)

	// let x = a.b.c.d.e.f

	printf("done\n")
}


func generictest()
{
	var arr = alloc[5] (int, int)
	var i = 0
	while i < arr.length
	{
		arr[i] = (i, i * (i + 5))
		i += 1
	}


	let new = map2(arr, add2)

	vartup(tmpf, [ (1, 5), (3, 10), (7, 3) ])
	vartup(tmpf, (1, 5), (3, 10), (7, 3))

	// let new = map(arr, gincr)


	// let new = mapstupid(arr2, gincr, apply)


	i = 0
	while i < new.length
	{
		printf("%d: %d\n", i, new[i])
		i += 1
	}

	// fntest(10, 3)
	// let x = apply(10, 30)
	// printf("x = %d\n", x)
}


func apply<U, V>(x: U, f: [(U) -> V]) -> V { f(x) }

func gincr<T>(x: T) -> T { x + 1 }
func mapstupid<T, K, R>(arr: T[], fn: [(T) -> K], fa: [(T, [(T) -> K]) -> R]) -> R[]
{
	var i = 0
	var ret = alloc[arr.length] R
	while i < arr.length
	{
		ret[i] = fa(arr[i], fn)
		i += 1
	}

	return ret
}




// func mapint(arr: int[], f: [(int) -> int]) -> int[]
// {
// 	var i = 0
// 	var ret = alloc[arr.length] int
// 	while i < arr.length
// 	{
// 		ret[i] = f(arr[i])
// 		i += 1
// 	}

// 	return ret
// }











