// standalone.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.



// import LibCInterface

ffi func printf(fmt: i8*, ...) -> i32

func map<T, R>(arr: T[], f: [(T) -> R]) -> R[]
{
	var i = 0
	var ret = alloc[arr.length] R
	while i < arr.length
	{
		ret[i] = f(arr[i])
		i += 1
	}

	return ret
}

func mapint(arr: int[], f: [(int) -> int]) -> int[]
{
	var i = 0
	var ret = alloc[arr.length] int
	while i < arr.length
	{
		ret[i] = f(arr[i])
		i += 1
	}

	return ret
}

func incr(x: int) -> int { x + 1 }
func gincr<T>(x: T) -> T { x + 1 }






/*
	notes

	extension [] { }
	^ this extends all dynamic arrays

	extension T[]
	^ this extends dynamic arrays of type T

	presumably eventually we'll get generic types,
	so we need generic extensions to go with that.

	but dynamic arrays aren't "generic types" per-se, so we need something for it.


	also:
	need to be able to pass generic functions to a function taking concrete functions
	eg.

	func foo(f: [(int) -> int])
	{
		...
	}

	func bar<T>(a: T) -> T
	{
		...
	}

	...

	foo(bar)

	this needs to instantiate a version of bar with T = int
	then pass it to foo.
*/

public func main()
{
	var arr = alloc[5] int
	var i = 0
	while i < arr.length
	{
		arr[i] = i
		i += 1
	}

	let new = mapint(arr, gincr)


	i = 0
	while i < new.length
	{
		printf("%d: %d\n", i, new[i])
		i += 1
	}

	// fntest(10, 3)
	// let x = apply(10, 30)
	// printf("x = %d\n", x)

	printf("done\n")
}




