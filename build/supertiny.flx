// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
// import "stdio" as _

// var glob: any
// fn test_refcounting_problem_thing()
// {
// 	fn foo(x: any)
// 	{
// 		if(x is int)
// 		{
// 			glob = x
// 		}
// 	}

// 	foo(30)
// }


struct Bar<T>
{
	var aaa: T
	var bbb: T
}

@entry fn main()
{
	// do {
	// 	class Foo<T>
	// 	{
	// 		init() { }
	// 		static fn bar(x: T) { printf("x = %d\n", x) }
	// 	}

	// 	Foo.bar(30)
	// 	Foo.bar(40)
	// 	Foo.bar(50)
	// }

	union Foo<T>
	{
		some: T
		none
	}


	let n: Foo<T: int> = Foo.none
	let s = Foo.some(301)
	printf("s = %d\n", s as Foo<T: int>.some)

	union Bar
	{
		some: str
		other: int
		none
	}

	let q = Bar.some("hello")
	let v = Bar.other(30)
	let m = Bar.none

	printf("q = %s, v = %d\n", q as Bar.some, v as Bar.other)
}



/*
	! even more
	! 26/10
	{
		1. scopes are a bit screwed up when we instantiate things while in a dotop -- see generic unions for an example.
	}

	! more things.
	! caa 03/10
	{
		// 1. clean up all the nested types -- sst's Decl::Param, FnCallArgument, ast's Defn::Arg, all that shit.
		2. splatting tuples into a generic function *will not work*
		// 3. fix errors. should probably go back to using virtual inheritance for them. fuck performance cos we shouldn't be erroring so often,
		// 	and they're slightly cheaper when we don't use them because it's just a pointer.
		4. pass the overall location to the polymorph solver.
		// 5. check for variadic forwarding -- enforce the splat.
		// 6. print out the solutions we found for inference on error.
		// 7. clean up FunctionDefn vs FunctionDecl
		// 8. check if the solution is complete before we blindly try to re-solve everything.
	}










	TODO for the immediate time frame (that keeps getting longer and where the real work always gets postponed)

	7. move long error messages on spans nearer to the left margin when there's only one span in the error.
	9. fix errors (in general?) {
		a. the generic solver should basically return only a Span, ie. a location with text.
		b. maybe find some way to 'link' two spans together with one message.
		c. figure out if/how we should split up errors when there are too many spans in one context.
			- do we duplicate the context?
			- if not then???
	}
	// 12. allow generic solver to infer things from generic types passed in {
	// 	eg: fn foobar<A, B>(a: Qux<T: A>, b: Qux<T: B>) => ...
	// 	foobar(Qux<T: i64>(), Qux<T: str>()) should infer that A = i64 and B = str.
	// }
	15. builtin way to get a character literal {
		even just enforcing that we get either a string literal of exactly length 1, or an i8 type, at compile-time.
		sure, we could just abort when passed a slice != length 1, but then why bother being statically typed??
	}
	// 17. refcounted moving is broken -- not sure if design flaw or not. investigate.
	// 18. generic unions {
	// 	currently they work okay, but it's very troublesome to unwrap, construct or declare them, because you need to
	// 	explicitly state the type of the union.

	// 	given that we just managed to do the thing where we can infer generic types from constructor arguments, we should be
	// 	able to do a similar thing for this case.

	// 	the problem here is that we need to be able to turn `Option<T: int>.Some(...)` into `Option.Some(...)`, but when we
	// 	just access `Option` directly without type arguments, we will get yelled at by the typechecker.

	// 	the alternative to this problem is just to disallow inference when doing it like this. then, inference is only enabled
	// 	when we `use` the union:

	// 	```
	// 	using Option

	// 	let x = Some(30)
	// 	let y = None
	// 	```

	// 	on this hand, we will also need to somehow allow `using` a generic union without specifying its type... bah.
	// }
	19. using for unions (see 18 for some issues re: generic types)
*/










// fn overloadErrorTest()
// {
// 	fn printThings(mul: f64, flts: [f64: ...])
// 	{
// 		printf("floats: ");
// 		for i in flts { printf("%.1f ", mul * i) }

// 		printf("\n")
// 	}

// 	fn printThings(mul: str, flts: [f64: ...])
// 	{
// 		printf("floats: ");
// 		for i in flts { printf("%s: %.1f ", mul.ptr, i) }

// 		printf("\n")
// 	}

// 	fn printThings()
// 	{
// 		printf("print things 3\n")
// 	}


// 	do {
// 		printThings(30, ...[ 1, 2, 3, 4, 5 ])
// 		printThings(0.813, 1, 2, 4.41, 39, 491.3, 381.7)
// 	}
// }
