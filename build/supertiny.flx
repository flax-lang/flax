// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
import "math" as _

class Animal
{
	init(sound: string, weight: f64)
	{
		self.sound = sound
		self.weight = weight * 2
	}

	init(isCute: bool)
	{
		self.sound = "what does the fox say?"
		self.weight = 30.49

		cute = isCute
	}

	init()
	{
		sound = "squish"
		weight = 10
		cute = false
	}

	var sound: string
	var weight: f64
	var cute: bool = true

	static var x: string = "BAH"
}

@entry fn main()
{
	let dog = Animal(isCute: false)
	Animal.x = "hello"

	printf("%s\n", Animal.x)
	printf("%s / %d / %f\n", dog.sound, dog.cute, dog.weight)
}




/*

@operator prefix 950 âˆš
@operator infix 800 dot
@operator infix 800 cross



struct vec2
{
	var x: int
	var y: int
}

struct vec3
{
	var x: int
	var y: int
	var z: int
}


operator infix + (a: vec2, b: vec2) -> vec2
{
	return vec2(x: a.x + b.x,
				y: a.y + b.y);
}

operator infix + (a: vec3, b: vec3) -> vec3
{
	return vec3(x: a.x + b.x,
				y: a.y + b.y,
				z: a.z + b.z);
}



operator prefix âˆš (a: double) -> double
{
	return sqrt(a)
}

operator infix dot (a: vec2, b: vec2) -> int
{
	return a.x * b.x + a.y * b.y
}

operator infix dot (a: vec3, b: vec3) -> int
{
	return (a.x * b.x) + (a.y * b.y) + (a.z * b.z)
}

operator infix cross (a: vec3, b: vec3) -> vec3
{
	return vec3(x: (a.y * b.z) - (a.z * b.y),
				y: (a.z * b.x) - (a.x * b.z),
				z: (a.x * b.y) - (a.y * b.x));
}



 */