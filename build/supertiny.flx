// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang
// Licensed under the Apache License Version 2.0.

export supertiny

import libc as _

// import std::io
// import std::map
import std::opt

@raw union ipv4
{
	_: struct {
		_: @raw union {
			bytes2: [u8: 4]
			raw3: u32
		}
	}

	_: struct {
		bytes: [u8: 4]
	}

	_: struct {
		raw2: u32
	}

	raw: u32
}


struct foo
{
	x: int
}

let glob = "foozle"[2:]
let glob2 = string("lmao")

@entry fn main()
{
	// do {
	// 	var addr: ipv4
	// 	addr.raw3 = 0xff01a8c0;

	// 	printf("%d.%d.%d.%d\n", addr.bytes[0], addr.bytes[1], addr.bytes[2], addr.bytes[3]);
	// }

	do {
		var x: int
		var y: int

		(x, y) = (30, 40)
		(x, y) = (y, x)

		printf("%d, %d\n", x, y)
	}

	do {
		printf("%s\n", glob)
	}

	// fn foo<T>(a: T) -> T
	// {
	// 	return a
	// }

	// do {
	// 	// let q = foo(x: 10)
	// 	printf("hello, world!\n")

	// 	let q = foo!<G: int>(10)
	// }

	// fn qux() -> int => 30

	// let x = std::opt::some!<int>(10)
	// let f = foo!<int>(3)
	// let q = qux!<int>()



	/* do {
		var x: @raw union {
			bar: f64
			foo: i64
		}

		x.bar = 3.14159

		printf("x = %.2lf\n", x.bar)
		printf("x = %d\n", x.foo)
	} */
}


/*

import std::opt
import std::map

	var map: std::map!<int, str>
	map.insert(3, "foo")

	let r = map.search(3)

	libc::printf("map[3] = %s\n", map.search(3) as std::opt::some)

	let res = map.remove(3)
	libc::printf("map[3]: res = %d, is_none = %d\n", res, map.search(3) is std::opt::none)

*/

/*
class X
{
	init(c: int)
	{
		this.data = c
	}

	var data: int
}

class Y : X
{
	init(c: int) : super(c: c + 30) { }
}

class Z : Y
{
	init(c: int) : super(c: c - 90) { }
}

class A
{
	init() { }
	virtual fn foo(a: &Y) -> &Y
	{
		std::io::println("A::foo()")
		return alloc Y(c: 471)
	}
}

class B : A
{
	init() : super() { }

	override fn foo(a: &X) -> &Z
	{
		std::io::println("B::foo()")
		return alloc Z(c: 748)
	}
}
*/

/*
	! important stuff to fix !
	{
		2. splatting tuples into a generic function *will not work*
		3. pass the overall location to the polymorph solver.

		5. for optional arguments on virtual functions, we need to reach a decision --- do we ban it entirely,
			or follow what c++ does, which is to use the default values specified on the static type of the pointer?
			note: we are definitely *not* going to handle it at runtime.

		6. see the error message when we pass a [T1:] to a [T2:...] without splatting; we should probably give a better
			diagnostic, and eg. recommend splatting it, if the internal types match (ie. T1 == T2).

			at the very least, the current message complains about casting [T1:] to T2, which isn't really correct.
	}


	TODO for the immediate time frame (that keeps getting longer and where the real work always gets postponed)

	7. move long error messages on spans nearer to the left margin when there's only one span in the error.
	9. fix errors (in general?) {
		a. the generic solver should basically return only a Span, ie. a location with text.
		b. maybe find some way to 'link' two spans together with one message.
		c. figure out if/how we should split up errors when there are too many spans in one context.
			- do we duplicate the context?
			- if not then???
	}

	16. operator overload errors {
		something like this:

		failed to resolve candidate for 'operator == (type_1, type_2)'
		callsite was here: 'foo == bar'
		potential candidates: 'operator == (type_1, type_3)'

		ofc potential candidates should be limited to ones where at least one of the types
		are similar.
	}

	17. better errors for ref-counting legality {
		when throwing an error due to having a ref-counted type in unsupported places (like in a raw-union), we
		should let the compiler show which member made the struct refcounted (because having a RC field in a struct
		makes that struct RC), since the 'root cause' could be nested very deep in the type hierarchy somewhere.

		eg.
		error: reference-counted type 'foo' cannot be a member of a raw-union:
		 39 |    bar: foo

		note:  'foo' inherits reference-counting from indirectly containing a field with a reference-counted type:
		 303 |   blabla: string

		note:  this is the type hierarchy leading from 'foo' leading to the type in question:
		       (foo <- qux <- some_type_t <- ... <- some_struct <- string)


		of course it would be nice if we can selectively print more context and omit stuff in the middle, like this:

		10  |    struct some_struct {
		... |       ...
		391 |       blabla: string
		    |

		something like that. detecting indentation would be a little tricky if we want to correctly indent the
		'...' that would appear in the struct body.

		actually having a proper API to set up this kind of error message would be a tough one as well...
	}

	18. figure out how constructors should work with transparent fields {

		I think it's currently not worth the effort to support initialising transparent fields in constructors; there's
		way too much stuff that needs to change. some findings:

		to actually allow it to pass typechecking, we just need to pass the "extended set" of field names to
		`verifyStructConstructorArguments`, which ought to suffice. problem is, we call that from the polymorph
		engine as well, and that's something i don't really feel like touching at the moment.

		^ as a corollary to that, we also need a way to discover all the transparent fields that are accessible at any
		point. currently in typecheck/dotop, we currently do an ad-hoc kind of thing, where we search for a particular
		name that's needed. should be not-that-difficult to get a list of all accessible things, i hope.

		^ we might need to duplicate this to work with ast::StructDefn as well, since the polymorph engine also uses
		the same verifyStructConstructorArguments to instantiate types a-la function calls.

		we also need some way to actually insert the value into the struct when it's being constructed, which might also
		get complicated.

		TL;DR: too complicated, not worth the time currently.

	}
*/












