// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
import "math" as _

class Animal
{
	init(w: f64)
	{
		weight = w
	}

	fn makeNoise()
	{
		printf("some generic sound\n")
	}


	var weight: f64
	var cute: bool = true
}

class Dog : Animal
{
	init()
	{
		init(300)
		printf("make dog (w = %f)\n", self.weight)
	}

	init(w: f64)
	{
		self.weight = w
	}

	fn makeNoise()
	{
		printf("bark bark (%f)\n", self.weight)
	}

	var tail: int
}

class Dalmation : Dog
{
	init()
	{
		self.weight = 30
		printf("make dalmation\n")
	}

	fn makeNoise()
	{
		printf("fetch or something %f\n", self.weight)
	}

	var numSpots: int
}


@entry fn main()
{
	let dog = Dalmation()
	dog.makeNoise()

	let k = Animal.weight
}











/*

@operator prefix 950 âˆš
@operator infix 800 dot
@operator infix 800 cross



struct vec2
{
	var x: int
	var y: int
}

struct vec3
{
	var x: int
	var y: int
	var z: int
}


operator infix + (a: vec2, b: vec2) -> vec2
{
	return vec2(x: a.x + b.x,
				y: a.y + b.y);
}

operator infix + (a: vec3, b: vec3) -> vec3
{
	return vec3(x: a.x + b.x,
				y: a.y + b.y,
				z: a.z + b.z);
}



operator prefix âˆš (a: double) -> double
{
	return sqrt(a)
}

operator infix dot (a: vec2, b: vec2) -> int
{
	return a.x * b.x + a.y * b.y
}

operator infix dot (a: vec3, b: vec3) -> int
{
	return (a.x * b.x) + (a.y * b.y) + (a.z * b.z)
}

operator infix cross (a: vec3, b: vec3) -> vec3
{
	return vec3(x: (a.y * b.z) - (a.z * b.y),
				y: (a.z * b.x) - (a.x * b.z),
				z: (a.x * b.y) - (a.y * b.x));
}



 */