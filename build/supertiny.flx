// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
import "math" as _

class Animal
{
	init(w: f64)
	{
		// printf("make animal w = %f\n", w)
		weight = w
	}

	virtual fn makeNoise()
	{
		printf("some generic sound\n")
	}


	var weight: f64
	var cute: bool = true
}

class Dog : Animal
{
	init() : super(w: 300)
	{
		// printf("make dog (w = %f)\n", weight)
	}

	override fn makeNoise()
	{
		printf("bark bark (%f)\n", weight)
	}

	virtual fn wag()
	{
		printf("wagging tail of length %d\n", tail)
	}

	var tail: int = 37
}

class Dalmation : Dog
{
	init() : super()
	{
		printf("make dalmation\n")
	}

	override fn wag()
	{
		printf("dalmation wags %d\n", tail)
	}

	var numSpots: int
}


@entry fn main()
{
	let k = 3.3 / 4.7
	printf("k = %.2f\n", k)

	let dogs = [ (0, "zero"), (1, "one"), (2, "two"), (3, "three"), (4, "four"), (5, "five") ]

	for (num, str), i in dogs {
		printf("%d: %s = %d\n", i, str, num)
	}
}











/*

@operator prefix 950 âˆš
@operator infix 800 dot
@operator infix 800 cross



struct vec2
{
	var x: int
	var y: int
}

struct vec3
{
	var x: int
	var y: int
	var z: int
}


operator infix + (a: vec2, b: vec2) -> vec2
{
	return vec2(x: a.x + b.x,
				y: a.y + b.y);
}

operator infix + (a: vec3, b: vec3) -> vec3
{
	return vec3(x: a.x + b.x,
				y: a.y + b.y,
				z: a.z + b.z);
}



operator prefix âˆš (a: double) -> double
{
	return sqrt(a)
}

operator infix dot (a: vec2, b: vec2) -> int
{
	return a.x * b.x + a.y * b.y
}

operator infix dot (a: vec3, b: vec3) -> int
{
	return (a.x * b.x) + (a.y * b.y) + (a.z * b.z)
}

operator infix cross (a: vec3, b: vec3) -> vec3
{
	return vec3(x: (a.y * b.z) - (a.z * b.y),
				y: (a.z * b.x) - (a.x * b.z),
				z: (a.x * b.y) - (a.y * b.x));
}



 */