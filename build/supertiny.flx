// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
import "math" as _

// import "stdio" as _


@entry fn main()
{
	var x = string("ONE")
	if false
	{
		x = string("TWOO")
	}
	else
	{
		x = string("THREE")
	}

	printf("x.length = %d\n", x.length)
}



/*
	TODO for the immediate time frame (that keeps getting longer and where the real work always gets postponed)

	// 1. constructor syntax for builtin types
	// 2. start work on the generic type solver? {
	// 	a. placeholder types for references to generic functions in a function call.
	//	b. make sure that instantiating a generic function by assinging it to a variable works.
	// }
	// 3. variadic functions
	// 3a. make variadic forwarding work properly
	// 5. fix SAA types {
	// 	a. don't crash when we do `.rc` on a type without a refcount pointer; sure, there'll be a branch and shit, but better than crashing. return `0`.
	// 	b. check if we properly initialise a refcount with the memory pointer in all cases (when we allocate)
	// 	c. as a corollary, check if we properly free the refcount pointer (ie. not leak memory) when we deallocate.
	// }
	// 6. clean up generic error output -- we have the content, just need to trim and arrange.
	7. move long error messages on spans nearer to the left margin when there's only one span in the error.
	// 8. return type inference for generics don't seem to work {
	// 	a. no idea why. too sleepy.
	// }
	9. fix errors (in general?) {
		a. the generic solver should basically return only a Span, ie. a location with text.
		b. maybe find some way to 'link' two spans together with one message.
		c. figure out if/how we should split up errors when there are too many spans in one context.
			- do we duplicate the context?
			- if not then???
	}
	// 10. memory corruption for 'set 3' of generic test???????
	// 11. fix generic instantiation of generic types {
	// 	a. we should not check for the entire generic context stack when matching generic versions (in generics.cpp:39)
	// 	b. instead, generic types need to push their own stack *in addition* to the normal one that functions use.
	// 	c. then we match against the generic type context stack.
	// 	d. with the current method we fail to find existing generic instantiations when we're doing stuff in a generic function.
	// }
	12. allow generic solver to infer things from generic types passed in {
		eg: fn foobar<A, B>(a: Qux<T: A>, b: Qux<T: B>) => ...
		foobar(Qux<T: i64>(), Qux<T: str>()) should infer that A = i64 and B = str.
	}
	// 13. fix cross-module generic types -- see linkedlist.flx.
	// 14. `i8.min` prints `128` instead of `-128` only on windows...
	15. builtin way to get a character literal {
		even just enforcing that we get either a string literal of exactly length 1, or an i8 type, at compile-time.
		sure, we could just abort when passed a slice != length 1, but then why bother being statically typed??
	}
	// 16. overloading based on signedness seems to fail.
	17. refcounted moving is broken -- not sure if design flaw or not. investigate.
*/










// fn overloadErrorTest()
// {
// 	fn printThings(mul: f64, flts: [f64: ...])
// 	{
// 		printf("floats: ");
// 		for i in flts { printf("%.1f ", mul * i) }

// 		printf("\n")
// 	}

// 	fn printThings(mul: str, flts: [f64: ...])
// 	{
// 		printf("floats: ");
// 		for i in flts { printf("%s: %.1f ", mul.ptr, i) }

// 		printf("\n")
// 	}

// 	fn printThings()
// 	{
// 		printf("print things 3\n")
// 	}


// 	do {
// 		printThings(30, ...[ 1, 2, 3, 4, 5 ])
// 		printThings(0.813, 1, 2, 4.41, 39, 491.3, 381.7)
// 	}
// }
