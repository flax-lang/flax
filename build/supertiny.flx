// supertiny.flx
// Copyright (c) 2014 - 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export supertiny

import "libc" as _
import "math" as _

@operator prefix 950 %
@operator prefix 950 √
@operator infix 800 dot


struct vec2
{
	var x: int
	var y: int
}

struct vec3
{
	var x: int
	var y: int
	var z: int
}


operator infix + (a: vec2, b: vec2) -> vec2
{
	var ret: vec2
	ret.x = a.x + b.x
	ret.y = a.y + b.y

	return ret
}

operator infix + (a: vec3, b: vec3) -> vec3
{
	var ret: vec3
	ret.x = a.x + b.x
	ret.y = a.y + b.y
	ret.z = a.z + b.z

	return ret
}

operator prefix √ (a: double) -> double
{
	return sqrt(a)
}

operator infix dot (a: vec2, b: vec2) -> int
{
	return a.x * b.x + a.y * b.y
}

operator infix dot (a: vec3, b: vec3) -> int
{
	return a.x * b.x + a.y * b.y + a.z * b.z
}


@entry fn main()
{
	var a: vec2; a.x = 10; a.y = 20;
	var b: vec2; b.x = 23; b.y = 17;

	let c = a + b
	let d = a dot b

	printf("c = (%d, %d), (%d), (%f)\n", c.x, c.y, d, √1491)
}




