// gltest.flx
// Copyright (c) 2014 - 2016, zhiayang
// Licensed under the Apache License Version 2.0.

// import Foundation
import "OpenGL/GL.flx"
import "SDL2/SDL.flx" as _

import libc as _

ffi fn rand() -> i32

fn frand(a: f64, b: f64) -> f64
{
    let r = (rand() as f64) / 2147483647.0
    let diff = b - a

    let x = r * diff
    return a + x
}

ffi fn log(a: f64) -> f64
ffi fn sin(a: f64) -> f64
ffi fn fabs(a: f64) -> f64
ffi fn fmin(a: f64, b: f64) -> f64
ffi fn fmax(a: f64, b: f64) -> f64
ffi fn sqrt(a: f64) -> f64

fn clamp(x: f64, lower: f64, upper: f64) -> f64
{
    return fmin(upper, fmax(x, lower))
}





public fn main(argc: i32, argv: &&i8) -> int
{
	SDL_Init(INIT_EVERYTHING)
	let mw = SDL_CreateWindow("test", 805240832, 805240832, 640, 480, 2)

	if mw == null
	{
		printf("omg no\n")
	}
	else
	{
		printf("window init: %p\n", mw)
	}

	let glc = SDL_GL_CreateContext(mw)

	SDL_GL_SetAttribute(GL_MULTISAMPLEBUFFERS, 1)
	SDL_GL_SetAttribute(GL_MULTISAMPLESAMPLES, 2)

	GL::glClearColor(0, 0, 0, 0)

	GL::glMatrixMode(GL::GL::PROJECTION)
	GL::glLoadIdentity()
	GL::gluPerspective(45.0, (640.0 / 480.0), 0.1, 100.0)

	GL::glMatrixMode(GL::GL::MODELVIEW)
	GL::glLoadIdentity()


	GL::glEnableClientState(GL::GL::VERTEX_ARRAY)
	GL::glEnableClientState(GL::GL::TEXTURE_COORD_ARRAY)
	GL::glEnableClientState(GL::GL::COLOR_ARRAY)
	GL::glEnableClientState(GL::GL::NORMAL_ARRAY)

	GL::glEnable(GL::GL::MULTISAMPLE)
	GL::glEnable(GL::GL::DEPTH_TEST)
	GL::glDepthFunc(GL::GL::LESS)

	GL::glBlendColor(1.0, 1.0, 1.0, 1.0)

	var rx: f64 = 0
	var ry: f64 = 0
	var rz: f64 = 0

	let vertices = [	0.0, -0.525731, 0.850651,
						0.850651, 0.0, 0.525731,
						0.850651, 0.0, -0.525731,
						-0.850651, 0.0, -0.525731,
						-0.850651, 0.0, 0.525731,
						-0.525731, 0.850651, 0.0,
						0.525731, 0.850651, 0.0,
						0.525731, -0.850651, 0.0,
						-0.525731, -0.850651, 0.0,
						0.0, -0.525731, -0.850651,
						0.0, 0.525731, -0.850651,
						0.0, 0.525731, 0.850651
					]

	// var colours: f64[36]
	var colours = alloc f64[48]
	defer free colours

	var i = 0
	while i < 48
	{
		colours[i + 0] = frand(0.3, 0.9)
		colours[i + 1] = frand(0.3, 0.9)
		colours[i + 2] = frand(0.3, 0.9)
		colours[i + 3] = 1.0
		i += 4
	}

	let indices: [u8: 60] = [
							1,  2,  6,
							1,  7,  2,
							3,  4,  5,
							4,  3,  8,
							6,  5,  11,
							5,  6,  10,
							9,  10, 2,
							10, 9,  3,
							7,  8,  9,
							8,  7,  0,
							11, 0,  1,
							0,  11, 4,
							6,  2,  10,
							1,  6,  11,
							3,  5,  10,
							5,  4,  11,
							2,  7,  9,
							7,  1,  0,
							3,  9,  8,
							4,  8,  0
						]


	let normals = [
						0.000000, -0.417775, 0.675974,
						0.675973, 0.000000, 0.417775,
						0.675973, -0.000000, -0.417775,
						-0.675973, 0.000000, -0.417775,
						-0.675973, -0.000000, 0.417775,
						-0.417775, 0.675974, 0.000000,
						0.417775, 0.675973, -0.000000,
						0.417775, -0.675974, 0.000000,
						-0.417775, -0.675974, 0.000000,
						0.000000, -0.417775, -0.675973,
						0.000000, 0.417775, -0.675974,
						0.000000, 0.417775, 0.675973
					]




	var speed = 1.0
	var scale = 1.0

	var run = true

	var srx = 0.0
	var sry = 0.0
	var srz = 0.0

	let stderr = fdopen(2, "a")
	while run
	{
		GL::glClear(GL::GL::COLOR_BUFFER_BIT | GL::GL::DEPTH_BUFFER_BIT)
		GL::glClearColor(0.109, 0.109, 0.109, 1.0)
		GL::glTranslated(0.0, 0.0, -5.0)

		GL::glRotated(rx, frand(0, 1), 0, 0)
		GL::glRotated(ry, 0, frand(0, 1), 0)
		GL::glRotated(rz, 0, 0, frand(0, 1))


		GL::glVertexPointer(3, GL::GL::DOUBLE, 0, vertices.ptr as &void)
		GL::glColorPointer(4, GL::GL::DOUBLE, 0, colours.ptr as &void)
		GL::glNormalPointer(GL::GL::DOUBLE, 0, normals.ptr as &void)

		GL::glDrawElements(GL::GL::TRIANGLES, 60, GL::GL::UNSIGNED_BYTE, indices as &void)

		GL::glLoadIdentity()

		SDL_GL_SwapWindow(mw)

		usleep((1 * 1000) as u32)

		rx += srx * speed
		ry += sry * speed
		rz += srz * speed

		var e: Event
		while SDL_PollEvent(&e) == 1
		{
			if e.type == EventType::Quit
			{
				printf("\nexiting\n")
				run = false
			}
			else if e.type == EventType::KeyUp
			{
				if (&e as &SDL.KeyboardEvent).keysym.sym == SDL.Key.R
				{
					srx = frand(-2.5, 2.5)
					sry = frand(-2.5, 2.5)
					srz = frand(-2.5, 2.5)
				}
				else if (&e as &SDL.KeyboardEvent).keysym.sym == SDL.Key.F
				{
					rx = 0
					ry = 0
					rz = 0
					srx = 0
					sry = 0
					srz = 0
					speed = 1.0

					glLoadIdentity()
				}
			}
			else if e.type == SDL.EventType.KeyDown
			{
				let ke = *(&e as &SDL.KeyboardEvent)

				if ke.keysym.sym == SDL.Key.Space
				{
					srx *= 0.9
					sry *= 0.9
					srz *= 0.9

				}

				else if ke.keysym.sym == SDL.Key.C { scale -= 0.5 }
				else if ke.keysym.sym == SDL.Key.V { scale += 0.5 }
				else if ke.keysym.sym == SDL.Key.X { speed += scale }
				else if ke.keysym.sym == SDL.Key.Z { speed -= scale }
				else if ke.keysym.sym == SDL.Key.D { sry -= scale }
				else if ke.keysym.sym == SDL.Key.A { sry += scale }
				else if ke.keysym.sym == SDL.Key.Q { srz -= scale }
				else if ke.keysym.sym == SDL.Key.E { srz += scale }
				else if ke.keysym.sym == SDL.Key.W { srx -= scale }
				else if ke.keysym.sym == SDL.Key.S { srx += scale }


				fprintf(stderr, "                                               \r> %.2lf / %.2lf : %.2lf, %.2lf, %.2lf\r", speed,
					scale, srx, sry, srz)
				fflush(stderr)
			}
		}

		/*
			todo: enums suck
		*/
	}








	return 0
}










