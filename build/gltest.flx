// gltest.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

// import Foundation
import OpenGL.GL
import SDL2.SDL

import Math
import LibCInterface

ffi func rand() -> i32

func frand(a: f64, b: f64) -> f64
{
    let r = (rand() as f64) / 2147483647.0
    let diff = b - a

    let x = r * diff
    return a + x
}

ffi func sin(a: f64) -> f64
ffi func fabs(a: f64) -> f64
ffi func fmin(a: f64, b: f64) -> f64
ffi func fmax(a: f64, b: f64) -> f64

func clamp(x: f64, lower: f64, upper: f64) -> f64
{
    return fmin(upper, fmax(x, lower))
}


public func main(argc: i32, argv: i8**) -> int
{
	SDL_Init(SDL.INIT_EVERYTHING)
	let mw = SDL_CreateWindow("test", 805240832, 805240832, 640, 480, 2)

	if mw == null
	{
		printf("omg no\n")
	}
	else
	{
		printf("window init: %p\n", mw)
	}

	let glc = SDL_GL_CreateContext(mw)

	SDL_GL_SetAttribute(SDL.GL_MULTISAMPLEBUFFERS, 1)
	SDL_GL_SetAttribute(SDL.GL_MULTISAMPLESAMPLES, 2)

	glClearColor(0, 0, 0, 0)

	glMatrixMode(GL.PROJECTION)
	glLoadIdentity()
	gluPerspective(45.0, (640.0 / 480.0), 0.1, 100.0)

	glMatrixMode(GL.MODELVIEW)
	glLoadIdentity()


	glEnableClientState(GL.VERTEX_ARRAY)
	glEnableClientState(GL.TEXTURE_COORD_ARRAY)
	glEnableClientState(GL.COLOR_ARRAY)
	glEnableClientState(GL.NORMAL_ARRAY)

	glEnable(GL.MULTISAMPLE)
	glEnable(GL.DEPTH_TEST)
	glDepthFunc(GL.LESS)

	glBlendColor(1.0, 1.0, 1.0, 1.0)

	var rx: f64 = 0
	var ry: f64 = 0
	var rz: f64 = 0

	let vertices = [	0.0, -0.525731, 0.850651,
						0.850651, 0.0, 0.525731,
						0.850651, 0.0, -0.525731,
						-0.850651, 0.0, -0.525731,
						-0.850651, 0.0, 0.525731,
						-0.525731, 0.850651, 0.0,
						0.525731, 0.850651, 0.0,
						0.525731, -0.850651, 0.0,
						-0.525731, -0.850651, 0.0,
						0.0, -0.525731, -0.850651,
						0.0, 0.525731, -0.850651,
						0.0, 0.525731, 0.850651
					]

	// var colours: f64[36]
	var colours = alloc[48] f64

	var i = 0
	while i < 48
	{
		colours[i + 0] = frand(0.3, 0.9)
		colours[i + 1] = frand(0.3, 0.9)
		colours[i + 2] = frand(0.3, 0.9)
		colours[i + 3] = 1.0
		i += 4
	}

	let indices: u8[60] = [
							1 as u8,  2 as u8,  6 as u8,
							1 as u8,  7 as u8,  2 as u8,
							3 as u8,  4 as u8,  5 as u8,
							4 as u8,  3 as u8,  8 as u8,
							6 as u8,  5 as u8,  11 as u8,
							5 as u8,  6 as u8,  10 as u8,
							9 as u8,  10 as u8, 2 as u8,
							10 as u8, 9 as u8,  3 as u8,
							7 as u8,  8 as u8,  9 as u8,
							8 as u8,  7 as u8,  0 as u8,
							11 as u8, 0 as u8,  1 as u8,
							0 as u8,  11 as u8, 4 as u8,
							6 as u8,  2 as u8,  10 as u8,
							1 as u8,  6 as u8,  11 as u8,
							3 as u8,  5 as u8,  10 as u8,
							5 as u8,  4 as u8,  11 as u8,
							2 as u8,  7 as u8,  9 as u8,
							7 as u8,  1 as u8,  0 as u8,
							3 as u8,  9 as u8,  8 as u8,
							4 as u8,  8 as u8,  0 as u8,
						]


	let normals = [
						0.000000, -0.417775, 0.675974,
						0.675973, 0.000000, 0.417775,
						0.675973, -0.000000, -0.417775,
						-0.675973, 0.000000, -0.417775,
						-0.675973, -0.000000, 0.417775,
						-0.417775, 0.675974, 0.000000,
						0.417775, 0.675973, -0.000000,
						0.417775, -0.675974, 0.000000,
						-0.417775, -0.675974, 0.000000,
						0.000000, -0.417775, -0.675973,
						0.000000, 0.417775, -0.675974,
						0.000000, 0.417775, 0.675973
					]




	var t = 0.0
	var t1 = 1.0
	while(true)
	{
		glClear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT)
		glClearColor(0.109, 0.109, 0.109, 1.0)
		glTranslated(0.0, 0.0, -5.0)

		glRotated(rx, 1, 0, 0);
		glRotated(ry, 0, 1, 0);
		glRotated(rz, 0, 0, 1);


		glVertexPointer(3 as i32, GL.DOUBLE, 0 as i32, &(vertices[0]) as void*)
		glColorPointer(4 as i32, GL.DOUBLE, 0 as i32, colours as void*)
		glNormalPointer(GL.DOUBLE, 0 as i32, &(normals[0]) as void*)

		glDrawElements(GL.TRIANGLES, 60, GL.UNSIGNED_BYTE, &(indices[0]) as void*)

		glLoadIdentity()


		var e: SDL_Event
		if SDL_PollEvent(&e) == 1
		{
			if e.type == 0x100
			{
				break
			}
		}

		SDL_GL_SwapWindow(mw)

		usleep((1 * 1000) as u32)

		let speed = 4
		rx -= speed * 1.6
		ry += speed * 0.8
		rz -= speed * 0.3

		t += 0.02 * frand(1, 2)
		t1 += 0.01
	}



















	do {

	}





	return 0
}










