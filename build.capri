version 1.17;
import "build/capri/Utilities.capri";

projDir		= "/Users/zhiayang/Desktop/Stuff/Orion Industries/flax";
sysroot 	= File.getAbsolutePath("{projDir}/build/sysroot");
prefix		= "usr/bin";
outputBin	= "flaxcBin";

flaxcBin	= "{sysroot}/{prefix}/{outputBin}";

project Flax default all
{
	CXX				= "clang++";
	CXXFLAGS		= "-g -std=gnu++1y -frtti -fexceptions -I`llvm-config --includedir`";
	def LLVM_CONFIG	= "llvm-config";

	target travis
	{
		LLVM_CONFIG = "llvm-config-3.5"
		Utils.println("Building for Travis CI");
	}



	capriExec	= System.getExecutablePath();

	src			= "source";
	objs		= "";



	cxx_invoke			= "{CXX} {CXXFLAGS} -c -o $file$.o $file$";
	llvm_config_invoke	= "{LLVM_CONFIG} --cxxflags --ldflags --system-libs --libs core jit native bitwriter irreader";
	final_invoke		= "{CXX} `{llvm_config_invoke}` {CXXFLAGS} -o '{sysroot}/{prefix}/{outputBin}' ";







	// tasks
	task all depends build, buildLib;
	task build { compile(); link(); }


	task test
	{
		all();

		Utils.println("Compiling test program (build/test.flx)");
		assert System.execute("'{flaxcBin}' -sysroot '{sysroot}' build/test.flx") == 0;
		Utils.println("=========================");
		System.execute("build/test");
		File.deleteFile("build/test");
	}




	task clean
	{
		Utils.println("Cleaning");
		Utilities.executeForChanged(src, ".o", "rm $file$", true);
		File.clearModifyCache();
	}

	task compile
	{
		System.execute("which llvm-config");
		System.execute("which llvm-config-3.5");
		// check if any header files changed
		changed = Utilities.hasChanges("{src}/include", ".h");

		// compile them all
		assert Utilities.executeForChanged(src, ".cpp", cxx_invoke, changed);
	}

	task link
	{
		// link together
		foreach(file in File.listTree(src))
		{
			if(String.endsWith(file, ".o"))
				objs += "'{file}' ";
		}

		System.execute("mkdir -p '{sysroot}/{prefix}'");
		System.execute("{final_invoke} {objs}");
	}

	task buildLib
	{
		foreach(fold in File.listFolder("{projDir}/lib"))
		{
			fold = "{projDir}/lib/" + fold;
			if(File.isFolder(fold))
			{
				bs = "";
				foreach(file in File.listFolder(fold))
				{
					if(file == "build.capri")
					{
						bs = "{fold}/{file}";
						break;
					}
				}

				if(bs != "")
				{
					// unfortunately, capri cannot import scripts at runtime (understandably)
					// so, we just invoke it.
					// good 'ol recursive make.
					pwd = File.getAbsolutePath(File.getCurrentDirectory());

					dirname = File.getPathOfFile(bs);
					File.changeDirectory(dirname);

					assert System.execute("{capriExec} --script '{bs}'") == 0;

					File.changeDirectory(pwd);
				}
			}
		}
	}
}






