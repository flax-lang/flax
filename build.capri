version 1.17;
import "build/capri/Utilities.capri";

sysroot 	= File.getAbsolutePath("build/sysroot");
prefix		= "/usr/local";
outputBin	= "flaxc";

flaxcBin	= "{sysroot}/{prefix}/bin/{outputBin}";

project Flax default all
{
	CXX				= "clang++";
	def LLVM_CONFIG	= "llvm-config";
	def GenDebugSym	= "dsymutil '{sysroot}/{prefix}/bin/{outputBin}' -o '{sysroot}/{prefix}/bin/{outputBin}.dSYM'";

	target ci
	{
		LLVM_CONFIG = "llvm-config-3.5";
		GenDebugSym = "";
		Utils.println("Building for automated deployment");
	}

	DISABLEWARN	= "-Wno-unused-parameter -Wno-sign-conversion -Wno-padded -Wno-c++98-compat -Wno-weak-vtables -Wno-documentation-unknown-command -Wno-old-style-cast -Wno-c++98-compat-pedantic -Wno-conversion -Wno-shadow -Wno-global-constructors -Wno-exit-time-destructors -Wno-missing-noreturn -Wno-unused-macros -Wno-switch-enum -Wno-deprecated -Wno-shift-sign-overflow -Wno-format-nonliteral -Wno-gnu-zero-variadic-macro-arguments -Wno-trigraphs";

	CXXFLAGS	= "-std=gnu++1y -g -Wall -Weverything {DISABLEWARN} -frtti -fexceptions -I`{LLVM_CONFIG} --includedir`";
	capriExec	= System.getExecutablePath();

	src			= "source";
	objs		= "";



	cxx_invoke			= "{CXX} {CXXFLAGS} -g -c -o $file$.o $file$";
	llvm_config_invoke	= "{LLVM_CONFIG} --cxxflags --ldflags --system-libs --libs core jit native bitwriter";
	final_invoke		= "{CXX} {CXXFLAGS} -g -o '{sysroot}/{prefix}/bin/{outputBin}' ";


	// tasks
	task all depends build, buildLib;
	task build { compile(); link(); buildLib(); }


	task test
	{
		all();

		Utils.println("Compiling test program (build/test.flx)");
		assert System.execute("'{flaxcBin}' -O3 -o build/test -sysroot '{sysroot}' build/test.flx") == 0;
		Utils.println("=========================");
		System.execute("build/test");
	}




	task clean
	{
		Utils.println("Cleaning");
		Utilities.executeForChanged(src, ".o", "rm $file$", true);
		File.clearModifyCache();
	}

	task compile
	{
		// check if any header files changed
		changed = Utilities.hasChanges("{src}/include", ".h");

		// compile them all
		Utilities.executeForChanged(src, ".cpp", "echo $file$;" + cxx_invoke, changed);
	}

	task link
	{
		// link together
		foreach(file in File.listTree(src))
		{
			if(String.endsWith(file, ".o"))
				objs += "'{file}' ";
		}

		assert System.execute("mkdir -p '{sysroot}/{prefix}/bin'") == 0;
		assert System.execute("{final_invoke} {objs} `{llvm_config_invoke}`") == 0;

		assert System.execute(GenDebugSym) == 0;
		Utils.println("Compilation complete.");
	}

	task buildLib
	{
		System.execute("mkdir -p '{sysroot}/{prefix}/lib/flaxlibs'");

		foreach(file in File.listFolder("./libs"))
		{
			file = "libs/" + file;
			if(File.isFile(file))
			{
				assert System.execute("cp {file} '{sysroot}/{prefix}/lib/flaxlibs/'") == 0;
			}
		}
	}
}






