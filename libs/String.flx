// String.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Unicode
import LibCInterface

public extension char
{
	fn isDigit() -> bool
	{
		let zero: char = "0"
		let nine: char = "9"

		return *self >= zero && *self <= nine
	}
}

public extension string
{
	fn find(s: string) -> int
	{
		// this is nonsensical
		if s.length > self.length { return -1 }

		let l = s.length
		let sl = self.length

		var i = 0
		while i < sl && l <= (sl - i)
		{
			let res = strncmp(self.raw + i, s.raw, l)
			if res == 0 { return i }

			i += 1
		}

		return -1
	}

	fn splitAtIndex(i: int) -> (string, string)
	{
		if i <= 0 { return ("", *self) }
		else if i > self.length { return (*self, "") }

		// else
		let a = string(self.raw, i)
		let b = string(self.raw + i, self.length - i)

		return (a, b)
	}

	fn substring(start: int, l: int) -> string
	{
		var len = l
		if start > self.length { return "" }
		if len == -1 || len > self.length - start
		{
			len = self.length - start
		}

		return string(self.raw + start, len)
	}

	fn substringInRange(start: int, end: int) -> string
	{
		if end == -1
		{
			return (*self).substring(start, -1)
		}
		else
		{
			return (*self).substring(start, end - start)
		}
	}
}
















