// String.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Unicode
import LibCInterface

public struct String
{
	var data: Int8*
	var length: Uint64
	var allocated: Uint64

	init()
	{
		self.data = malloc(32)
		self.length = 0
		self.allocated = 32
	}

	init(str: Int8*)
	{
		self.allocated = 0
		self.set(str)
	}

	init(str: String)
	{
		self.init(str.data)
	}

	func clear()
	{
		if self.allocated > 0
		{
			memset(self.data, 0, self.length)
		}

		self.length = 0
	}

	func grow(newSize: Uint64)
	{
		var needFree = (self.allocated != 0)

		self.allocated = (newSize + 31) / 32
		var newDat = malloc(self.allocated)
		var moveCount = strlen(self.data)

		memcpy(newDat, self.data, moveCount)

		if needFree
		{
			free(self.data)
		}

		self.data = newDat
	}


	func set(str: Int8*)
	{
		self.clear()
		var len = strlen(self.data)
		if self.allocated < len
		{
			self.grow(len)
		}

		memcpy(self.data, str, len)
		self.length = UnicodeStringLength(self.data)
	}

	func append(str: Int8*)
	{
		var addlen = strlen(str)
		if strlen(self.data) + addlen >= self.allocated
		{
			self.grow(strlen(self.data) + addlen + 1)
		}

		memcpy(self.data + strlen(self.data), str, addlen)
		self.length += addlen
	}









	operator+(other: String) -> String
	{
		var ret = #self
		ret.append(other.data)

		return ret
	}

	operator+(other: Int8*) -> String
	{
		var ret = #self
		ret.append(other)

		return ret
	}

	operator+=(other: String) -> String
	{
		printf("self: %s, other: %s\n", self.data, other.data)
		self.append(other.data)
		return #self
	}

	operator+=(other: Int8*) -> String
	{
		self.append(other)
		return #self
	}



	operator=(other: Int8*)
	{
		self.set(other)
	}

	operator=(other: String)
	{
		self.set(other.data)
	}

	operator==(other: Int8*) -> Bool
	{
		// return false
		return strcmp(self.data, other) == 0
	}

	operator==(other: String) -> Bool
	{
		return strcmp(self.data, other.data) == 0
	}
}
