// String.flx
// Copyright (c) 2014 - The Foreseeable Future, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Unicode
import LibCInterface

public struct String
{
	var data: Int8* = 0
	var allocated: Uint64 = 0

	var length: Uint64
	{
		if self.data == 0
		{
			return 0
		}

		Utf8Length(self.data)
	}

	var byteCount: Uint64
	{
		if self.data != 0
		{
			return strlen(self.data)
		}

		return 0
	}

	init()
	{
		self.data = malloc(32)
		self.allocated = 32
	}

	init(str: Int8*)
	{
		self.allocated = 0
		self.setString(str)
	}

	init(str: String)
	{
		self.init(str.data)
	}

	func clear()
	{
		if self.allocated > 0
		{
			memset(self.data, 0, self.length)
		}
		else
		{
			self.allocated = 0
			self.data = 0
		}
	}

	func grow(newSize: Uint64)
	{
		var needFree = (self.allocated != 0)

		self.allocated = 32 * ((newSize + 31) / 32)

		var newDat = malloc(self.allocated)
		var moveCount = self.byteCount

		memcpy(newDat, self.data, moveCount)

		if needFree
		{
			free(self.data)
		}

		self.data = newDat
		self.data[self.byteCount] = 0
	}


	func setString(str: Int8*)
	{
		self.clear()
		var len = strlen(str)

		if self.allocated < len
		{
			self.grow(len + 1)
		}

		memcpy(self.data, str, len)
		self.data[len] = 0
	}




	func append(str: Int8*)
	{
		var addlen = strlen(str)
		if self.byteCount + addlen >= self.allocated
		{
			self.grow(self.byteCount + addlen + 1)
		}

		let prevBC = self.byteCount		// we need to fix a value on this, because byteCount is a computed property!!!
		memcpy(self.data + self.byteCount, str, addlen)
		self.data[prevBC + addlen] = 0
	}









	operator+(other: String) -> String
	{
		var ret: String(self.data)
		ret += other

		return ret
	}

	operator+(other: Int8*) -> String
	{
		var ret: String(self.data)
		ret += other

		return ret
	}

	operator+=(other: String) -> String
	{
		self.append(other.data)
		return #self
	}

	operator+=(other: Int8*) -> String
	{
		self.append(other)
		return #self
	}

	operator=(other: Int8*)
	{
		self.setString(other)
	}

	operator=(other: String)
	{
		self.setString(other.data)
	}

	operator==(other: Int8*) -> Bool
	{
		// return false
		return strcmp(self.data, other) == 0
	}

	operator==(other: String) -> Bool
	{
		return strcmp(self.data, other.data) == 0
	}
}
