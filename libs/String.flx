// String.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import Unicode
import LibCInterface

public class Character
{
	var utf8Bytes: uint8* = null
	var byteCount: uint64 = 0

	init()
	{
		self.utf8Bytes = null
		self.byteCount = 0
	}

	init(c: int8)
	{
		self.utf8Bytes = alloc[2] uint8
		self.utf8Bytes[0] = c
		self.utf8Bytes[1] = 0

		self.byteCount = 1
	}

	init(c: uint8*, l: uint64)
	{
		self.utf8Bytes = alloc[l + 1] uint8
		self.byteCount = l

		memcpy(self.utf8Bytes as int8*, c as int8*, l)
		self.utf8Bytes[l] = 0
	}

	init(c: String)
	{
		self.init(c.data as uint8*, 1 as uint64)
	}


	func hasData() -> bool
	{
		return self.utf8Bytes != null && self.byteCount > 0
	}

	func toAscii() -> int8
	{
		if self.utf8Bytes != null && !(self.utf8Bytes[0] & 0x80)
		{
			// is ascii, return it
			return self.utf8Bytes[0]
		}
		else
		{
			return 0
		}
	}

	func isAscii() -> bool
	{
		return self.utf8Bytes != null && !(self.utf8Bytes[0] & 0x80)
	}




	func isDigit() -> bool
	{
		return self.isAscii() && self.toAscii() >= 48 && self.toAscii() <= 57
	}
}







public class String
{
	private var data: int8* = null
	private var allocated: uint64 = 0

	var length: uint64
	{
		if self.data == null
		{
			return 0
		}

		Utf8Length(self.data)
	}

	var byteCount: uint64
	{
		if self.data != null
		{
			return strlen(self.data)
		}

		return 0
	}

	init()
	{
		self.data = malloc(32)
		self.allocated = 32

		self.setString(@raw "")
	}

	init(str: int8*)
	{
		self.allocated = 0
		self.setString(str)
	}

	init(str: String)
	{
		let l = strlen(str.data)

		self.grow(l + 1)
		self.setString(str.data)
	}

	func clear()
	{
		if self.allocated > 0
		{
			memset(self.data, (0 as int32), self.length)
		}
		else
		{
			self.allocated = 0
			self.data = null
		}
	}

	func grow(newSize: uint64)
	{
		var needFree = (self.allocated != 0)

		self.allocated = 32 * ((newSize + 31) / 32)

		let newDat = malloc(self.allocated)
		let moveCount = self.byteCount

		memset(newDat, 0, self.allocated)
		memcpy(newDat, self.data, moveCount)

		if needFree
		{
			free(self.data)
		}

		self.data = newDat
		self.data[self.byteCount] = 0
	}


	func setString(str: int8*)
	{
		self.clear()
		let len = strlen(str)

		if self.allocated < len
		{
			self.grow(len + 1)
		}

		memcpy(self.data, str, len)
		self.data[len] = 0
	}




	func append(str: int8*, addlen: uint64)
	{
		if self.byteCount + addlen >= self.allocated
		{
			self.grow(self.byteCount + addlen + 1)
		}

		let prevBC = self.byteCount		// we need to fix a value on this, because byteCount is a computed property!!!
		memcpy(self.data + self.byteCount, str, addlen)
		self.data[prevBC + addlen] = 0
	}

	func append(char: Character)
	{
		self.append(char.utf8Bytes as int8*, char.byteCount)
	}




	func lol() -> int64
	{
		return 5912;
	}





	// operators

	operator [] (index: uint64) -> Character
	{
		get
		{
			if index >= self.length { return Character() }

			// else
			let chars = Utf8Index(self.data, index)
			let ret = Character(chars as uint8*, Utf8CharLength(chars))

			return ret
		}
	}




	operator = (other: int8*)
	{
		self.setString(other)
	}

	operator = (other: String)
	{
		self.setString(other.data)
	}

	operator += (other: String)
	{
		self.append(other.data, strlen(other))
	}

	operator += (other: int8*)
	{
		self.append(other, strlen(other))
	}

	operator += (other: Character)
	{
		self.append(other)
	}
}



public operator + (lhs: String, rhs: String) -> String
{
	var ret = String(lhs.data)
	ret += rhs

	return ret
}

public operator + (lhs: String, rhs: int8*) -> String
{
	var ret = String(lhs.data)
	ret += rhs

	return ret
}

public operator + (lhs: String, rhs: Character) -> String
{
	var ret = String(lhs.data)
	ret += rhs

	return ret
}

public operator == (lhs: String, rhs: int8*) -> bool
{
	// return false
	return strcmp(lhs.data, rhs) == 0
}

public operator == (lhs: String, rhs: String) -> bool
{
	return strcmp(lhs.data, rhs.data) == 0
}

public operator == (lhs: Character, rhs: Character) -> bool
{
	return lhs.byteCount == rhs.byteCount && strncmp(lhs.utf8Bytes as int8*, rhs.utf8Bytes as int8*, lhs.byteCount) == 0
}










