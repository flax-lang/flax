// Vector2.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

namespace Math
{
	public struct Vector2
	{
		var x: Double
		var y: Double
	}
}

public operator == (this: Math.Vector2, other: Math.Vector2) -> Bool { (this.x == other.x) && (this.y == other.y) }

@operator[Commutative]
public operator * (this: Math.Vector2, other: Double) -> Math.Vector2 { Math.Vector2(this.x * other, this.y * other) }
public operator / (this: Math.Vector2, other: Double) -> Math.Vector2 { Math.Vector2(this.x / other, this.y / other) }

@operator[Commutative]
public operator * (this: Math.Vector2, other: Int) -> Math.Vector2 { Math.Vector2(this.x * other, this.y * other) }
public operator / (this: Math.Vector2, other: Int) -> Math.Vector2 { Math.Vector2(this.x / other, this.y / other) }

public operator + (a: Math.Vector2, b: Math.Vector2) -> Math.Vector2 { Math.Vector2(a.x + b.x, a.y + b.y) }
public operator - (a: Math.Vector2, b: Math.Vector2) -> Math.Vector2 { Math.Vector2(a.x - b.x, a.y - b.y) }

@operator[90]
public operator â€¢ (a: Math.Vector2, b: Math.Vector2) -> Double { a.x * b.x + a.y * b.y }

@operator[100]
public operator x (a: Math.Vector2, b: Math.Vector2) -> Double { a.x * b.y - a.y * b.x }





















