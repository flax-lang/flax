// Vector2.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

namespace Math
{
	public struct Vector2
	{
		var x: Double
		var y: Double



		operator == (other: Math.Vector2) -> Bool { (self.x == other.x) && (self.y == other.y) }

		operator * (other: Double) -> Math.Vector2 { Math.Vector2(self.x * other, self.y * other) }
		operator / (other: Double) -> Math.Vector2 { Math.Vector2(self.x / other, self.y / other) }

		operator * (other: Int) -> Math.Vector2 { Math.Vector2(self.x * other, self.y * other) }
		operator / (other: Int) -> Math.Vector2 { Math.Vector2(self.x / other, self.y / other) }

		operator = (other: Math.Vector2) -> Math.Vector2*
		{
			self.x = other.x
			self.y = other.y

			return self
		}
	}
}


operator + (a: Math.Vector2, b: Math.Vector2) -> Math.Vector2 { Math.Vector2(a.x + b.x, a.y + b.y) }
operator - (a: Math.Vector2, b: Math.Vector2) -> Math.Vector2 { Math.Vector2(a.x - b.x, a.y - b.y) }

@operator[90]
operator â€¢ (a: Math.Vector2, b: Math.Vector2) -> Double { a.x * b.x + a.y * b.y }

@operator[100]
operator x (a: Math.Vector2, b: Math.Vector2) -> Double { a.x * b.y - a.y * b.x }





















