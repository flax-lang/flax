// Vector3.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

namespace Math
{
	public struct Vector3
	{
		var x: Double
		var y: Double
		var z: Double


		operator == (other: Math.Vector3) -> Bool { (self.x == other.x) && (self.y == other.y) && (self.z == other.z) }

		@operator[Commutative]
		operator * (other: Double) -> Math.Vector3 { Math.Vector3(self.x * other, self.y * other, self.z * other) }
		operator / (other: Double) -> Math.Vector3 { Math.Vector3(self.x / other, self.y / other, self.z / other) }

		@operator[Commutative]
		operator * (other: Int) -> Math.Vector3 { Math.Vector3(self.x * other, self.y * other, self.z * other) }
		operator / (other: Int) -> Math.Vector3 { Math.Vector3(self.x / other, self.y / other, self.z / other) }

		operator = (other: Math.Vector3) -> Math.Vector3*
		{
			self.x = other.x
			self.y = other.y
			self.z = other.z

			let m: Math.Vector3* = 0
			return m
		}
	}
}


operator + (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3 { Math.Vector3(a.x + b.x, a.y + b.y, a.z + b.z) }
operator - (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3 { Math.Vector3(a.x - b.x, a.y - b.y, a.z - b.z) }

@operator[90]
operator â€¢ (a: Math.Vector3, b: Math.Vector3) -> Double { (a.x * b.x) + (a.y * b.y) + (a.z * b.z) }

@operator[100]
operator x (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3
{
	Math.Vector3(
				(a.y * b.z) - (a.z * b.y),
				(a.z * b.x) - (a.x * b.z),
				(a.x * b.y) - (a.y * b.x))
}




















