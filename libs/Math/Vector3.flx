// Vector3.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

namespace Math
{
	public struct Vector3
	{
		var x: Double
		var y: Double
		var z: Double
	}
}



public operator == (this: Math.Vector3, other: Math.Vector3) -> Bool { (this.x == other.x) && (this.y == other.y) && (this.z == other.z) }

@operator[Commutative]
public operator * (this: Math.Vector3, other: Double) -> Math.Vector3 { Math.Vector3(this.x * other, this.y * other, this.z * other) }
public operator / (this: Math.Vector3, other: Double) -> Math.Vector3 { Math.Vector3(this.x / other, this.y / other, this.z / other) }

@operator[Commutative]
public operator * (this: Math.Vector3, other: Int) -> Math.Vector3 { Math.Vector3(this.x * other, this.y * other, this.z * other) }
public operator / (this: Math.Vector3, other: Int) -> Math.Vector3 { Math.Vector3(this.x / other, this.y / other, this.z / other) }


public operator + (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3 { Math.Vector3(a.x + b.x, a.y + b.y, a.z + b.z) }
public operator - (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3 { Math.Vector3(a.x - b.x, a.y - b.y, a.z - b.z) }

@operator[90]
public operator â€¢ (a: Math.Vector3, b: Math.Vector3) -> Double { (a.x * b.x) + (a.y * b.y) + (a.z * b.z) }

@operator[100]
public operator x (a: Math.Vector3, b: Math.Vector3) -> Math.Vector3
{
	Math.Vector3(
				(a.y * b.z) - (a.z * b.y),
				(a.z * b.x) - (a.x * b.z),
				(a.x * b.y) - (a.y * b.x))
}




















