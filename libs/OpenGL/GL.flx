// GL.flx
// Copyright (c) 2014 - 2016, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

public enum GL: u32
{
	case FALSE                                        = 0
	case TRUE                                         = 1
	case BYTE                                         = 0x1400
	case UNSIGNED_BYTE                                = 0x1401
	case SHORT                                        = 0x1402
	case UNSIGNED_SHORT                               = 0x1403
	case INT                                          = 0x1404
	case UNSIGNED_INT                                 = 0x1405
	case FLOAT                                        = 0x1406
	case TWO_BYTES                                    = 0x1407
	case THREE_BYTES                                  = 0x1408
	case FOUR_BYTES                                   = 0x1409
	case DOUBLE                                       = 0x140A
	case POINTS                                       = 0x0000
	case LINES                                        = 0x0001
	case LINE_LOOP                                    = 0x0002
	case LINE_STRIP                                   = 0x0003
	case TRIANGLES                                    = 0x0004
	case TRIANGLE_STRIP                               = 0x0005
	case TRIANGLE_FAN                                 = 0x0006
	case QUADS                                        = 0x0007
	case QUAD_STRIP                                   = 0x0008
	case POLYGON                                      = 0x0009
	case VERTEX_ARRAY                                 = 0x8074
	case NORMAL_ARRAY                                 = 0x8075
	case COLOR_ARRAY                                  = 0x8076
	case INDEX_ARRAY                                  = 0x8077
	case TEXTURE_COORD_ARRAY                          = 0x8078
	case EDGE_FLAG_ARRAY                              = 0x8079
	case VERTEX_ARRAY_SIZE                            = 0x807A
	case VERTEX_ARRAY_TYPE                            = 0x807B
	case VERTEX_ARRAY_STRIDE                          = 0x807C
	case NORMAL_ARRAY_TYPE                            = 0x807E
	case NORMAL_ARRAY_STRIDE                          = 0x807F
	case COLOR_ARRAY_SIZE                             = 0x8081
	case COLOR_ARRAY_TYPE                             = 0x8082
	case COLOR_ARRAY_STRIDE                           = 0x8083
	case INDEX_ARRAY_TYPE                             = 0x8085
	case INDEX_ARRAY_STRIDE                           = 0x8086
	case TEXTURE_COORD_ARRAY_SIZE                     = 0x8088
	case TEXTURE_COORD_ARRAY_TYPE                     = 0x8089
	case TEXTURE_COORD_ARRAY_STRIDE                   = 0x808A
	case EDGE_FLAG_ARRAY_STRIDE                       = 0x808C
	case VERTEX_ARRAY_POINTER                         = 0x808E
	case NORMAL_ARRAY_POINTER                         = 0x808F
	case COLOR_ARRAY_POINTER                          = 0x8090
	case INDEX_ARRAY_POINTER                          = 0x8091
	case TEXTURE_COORD_ARRAY_POINTER                  = 0x8092
	case EDGE_FLAG_ARRAY_POINTER                      = 0x8093
	case V2F                                          = 0x2A20
	case V3F                                          = 0x2A21
	case C4UB_V2F                                     = 0x2A22
	case C4UB_V3F                                     = 0x2A23
	case C3F_V3F                                      = 0x2A24
	case N3F_V3F                                      = 0x2A25
	case C4F_N3F_V3F                                  = 0x2A26
	case T2F_V3F                                      = 0x2A27
	case T4F_V4F                                      = 0x2A28
	case T2F_C4UB_V3F                                 = 0x2A29
	case T2F_C3F_V3F                                  = 0x2A2A
	case T2F_N3F_V3F                                  = 0x2A2B
	case T2F_C4F_N3F_V3F                              = 0x2A2C
	case T4F_C4F_N3F_V4F                              = 0x2A2D
	case MATRIX_MODE                                  = 0x0BA0
	case MODELVIEW                                    = 0x1700
	case PROJECTION                                   = 0x1701
	case TEXTURE                                      = 0x1702
	case POINT_SMOOTH                                 = 0x0B10
	case POINT_SIZE                                   = 0x0B11
	case POINT_SIZE_GRANULARITY                       = 0x0B13
	case POINT_SIZE_RANGE                             = 0x0B12
	case LINE_SMOOTH                                  = 0x0B20
	case LINE_STIPPLE                                 = 0x0B24
	case LINE_STIPPLE_PATTERN                         = 0x0B25
	case LINE_STIPPLE_REPEAT                          = 0x0B26
	case LINE_WIDTH                                   = 0x0B21
	case LINE_WIDTH_GRANULARITY                       = 0x0B23
	case LINE_WIDTH_RANGE                             = 0x0B22
	case POINT                                        = 0x1B00
	case LINE                                         = 0x1B01
	case FILL                                         = 0x1B02
	case CW                                           = 0x0900
	case CCW                                          = 0x0901
	case FRONT                                        = 0x0404
	case BACK                                         = 0x0405
	case POLYGON_MODE                                 = 0x0B40
	case POLYGON_SMOOTH                               = 0x0B41
	case POLYGON_STIPPLE                              = 0x0B42
	case EDGE_FLAG                                    = 0x0B43
	case CULL_FACE                                    = 0x0B44
	case CULL_FACE_MODE                               = 0x0B45
	case FRONT_FACE                                   = 0x0B46
	case POLYGON_OFFSET_FACTOR                        = 0x8038
	case POLYGON_OFFSET_UNITS                         = 0x2A00
	case POLYGON_OFFSET_POINT                         = 0x2A01
	case POLYGON_OFFSET_LINE                          = 0x2A02
	case POLYGON_OFFSET_FILL                          = 0x8037
	case COMPILE                                      = 0x1300
	case COMPILE_AND_EXECUTE                          = 0x1301
	case LIST_BASE                                    = 0x0B32
	case LIST_INDEX                                   = 0x0B33
	case LIST_MODE                                    = 0x0B30
	case NEVER                                        = 0x0200
	case LESS                                         = 0x0201
	case EQUAL                                        = 0x0202
	case LEQUAL                                       = 0x0203
	case GREATER                                      = 0x0204
	case NOTEQUAL                                     = 0x0205
	case GEQUAL                                       = 0x0206
	case ALWAYS                                       = 0x0207
	case DEPTH_TEST                                   = 0x0B71
	case DEPTH_BITS                                   = 0x0D56
	case DEPTH_CLEAR_VALUE                            = 0x0B73
	case DEPTH_FUNC                                   = 0x0B74
	case DEPTH_RANGE                                  = 0x0B70
	case DEPTH_WRITEMASK                              = 0x0B72
	case DEPTH_COMPONENT                              = 0x1902
	case LIGHTING                                     = 0x0B50
	case LIGHT0                                       = 0x4000
	case LIGHT1                                       = 0x4001
	case LIGHT2                                       = 0x4002
	case LIGHT3                                       = 0x4003
	case LIGHT4                                       = 0x4004
	case LIGHT5                                       = 0x4005
	case LIGHT6                                       = 0x4006
	case LIGHT7                                       = 0x4007
	case SPOT_EXPONENT                                = 0x1205
	case SPOT_CUTOFF                                  = 0x1206
	case CONSTANT_ATTENUATION                         = 0x1207
	case LINEAR_ATTENUATION                           = 0x1208
	case QUADRATIC_ATTENUATION                        = 0x1209
	case AMBIENT                                      = 0x1200
	case DIFFUSE                                      = 0x1201
	case SPECULAR                                     = 0x1202
	case SHININESS                                    = 0x1601
	case EMISSION                                     = 0x1600
	case POSITION                                     = 0x1203
	case SPOT_DIRECTION                               = 0x1204
	case AMBIENT_AND_DIFFUSE                          = 0x1602
	case COLOR_INDEXES                                = 0x1603
	case LIGHT_MODEL_TWO_SIDE                         = 0x0B52
	case LIGHT_MODEL_LOCAL_VIEWER                     = 0x0B51
	case LIGHT_MODEL_AMBIENT                          = 0x0B53
	case FRONT_AND_BACK                               = 0x0408
	case SHADE_MODEL                                  = 0x0B54
	case FLAT                                         = 0x1D00
	case SMOOTH                                       = 0x1D01
	case COLOR_MATERIAL                               = 0x0B57
	case COLOR_MATERIAL_FACE                          = 0x0B55
	case COLOR_MATERIAL_PARAMETER                     = 0x0B56
	case NORMALIZE                                    = 0x0BA1
	case CLIP_PLANE0                                  = 0x3000
	case CLIP_PLANE1                                  = 0x3001
	case CLIP_PLANE2                                  = 0x3002
	case CLIP_PLANE3                                  = 0x3003
	case CLIP_PLANE4                                  = 0x3004
	case CLIP_PLANE5                                  = 0x3005
	case ACCUM_RED_BITS                               = 0x0D58
	case ACCUM_GREEN_BITS                             = 0x0D59
	case ACCUM_BLUE_BITS                              = 0x0D5A
	case ACCUM_ALPHA_BITS                             = 0x0D5B
	case ACCUM_CLEAR_VALUE                            = 0x0B80
	case ACCUM                                        = 0x0100
	case ADD                                          = 0x0104
	case LOAD                                         = 0x0101
	case MULT                                         = 0x0103
	case RETURN                                       = 0x0102
	case ALPHA_TEST                                   = 0x0BC0
	case ALPHA_TEST_REF                               = 0x0BC2
	case ALPHA_TEST_FUNC                              = 0x0BC1
	case BLEND                                        = 0x0BE2
	case BLEND_SRC                                    = 0x0BE1
	case BLEND_DST                                    = 0x0BE0
	case ZERO                                         = 0
	case ONE                                          = 1
	case SRC_COLOR                                    = 0x0300
	case ONE_MINUS_SRC_COLOR                          = 0x0301
	case SRC_ALPHA                                    = 0x0302
	case ONE_MINUS_SRC_ALPHA                          = 0x0303
	case DST_ALPHA                                    = 0x0304
	case ONE_MINUS_DST_ALPHA                          = 0x0305
	case DST_COLOR                                    = 0x0306
	case ONE_MINUS_DST_COLOR                          = 0x0307
	case SRC_ALPHA_SATURATE                           = 0x0308
	case FEEDBACK                                     = 0x1C01
	case RENDER                                       = 0x1C00
	case SELECT                                       = 0x1C02
	case TWO_D                                        = 0x0600
	case THREE_D                                      = 0x0601
	case THREE_D_COLOR                                = 0x0602
	case THREE_D_COLOR_TEXTURE                        = 0x0603
	case FOUR_D_COLOR_TEXTURE                         = 0x0604
	case POINT_TOKEN                                  = 0x0701
	case LINE_TOKEN                                   = 0x0702
	case LINE_RESET_TOKEN                             = 0x0707
	case POLYGON_TOKEN                                = 0x0703
	case BITMAP_TOKEN                                 = 0x0704
	case DRAW_PIXEL_TOKEN                             = 0x0705
	case COPY_PIXEL_TOKEN                             = 0x0706
	case PASS_THROUGH_TOKEN                           = 0x0700
	case FEEDBACK_BUFFER_POINTER                      = 0x0DF0
	case FEEDBACK_BUFFER_SIZE                         = 0x0DF1
	case FEEDBACK_BUFFER_TYPE                         = 0x0DF2
	case SELECTION_BUFFER_POINTER                     = 0x0DF3
	case SELECTION_BUFFER_SIZE                        = 0x0DF4
	case FOG                                          = 0x0B60
	case FOG_MODE                                     = 0x0B65
	case FOG_DENSITY                                  = 0x0B62
	case FOG_COLOR                                    = 0x0B66
	case FOG_INDEX                                    = 0x0B61
	case FOG_START                                    = 0x0B63
	case FOG_END                                      = 0x0B64
	case LINEAR                                       = 0x2601
	case EXP                                          = 0x0800
	case EXP2                                         = 0x0801
	case LOGIC_OP                                     = 0x0BF1
	case INDEX_LOGIC_OP                               = 0x0BF1
	case COLOR_LOGIC_OP                               = 0x0BF2
	case LOGIC_OP_MODE                                = 0x0BF0
	case CLEAR                                        = 0x1500
	case SET                                          = 0x150F
	case COPY                                         = 0x1503
	case COPY_INVERTED                                = 0x150C
	case NOOP                                         = 0x1505
	case INVERT                                       = 0x150A
	case AND                                          = 0x1501
	case NAND                                         = 0x150E
	case OR                                           = 0x1507
	case NOR                                          = 0x1508
	case XOR                                          = 0x1506
	case EQUIV                                        = 0x1509
	case AND_REVERSE                                  = 0x1502
	case AND_INVERTED                                 = 0x1504
	case OR_REVERSE                                   = 0x150B
	case OR_INVERTED                                  = 0x150D
	case STENCIL_BITS                                 = 0x0D57
	case STENCIL_TEST                                 = 0x0B90
	case STENCIL_CLEAR_VALUE                          = 0x0B91
	case STENCIL_FUNC                                 = 0x0B92
	case STENCIL_VALUE_MASK                           = 0x0B93
	case STENCIL_FAIL                                 = 0x0B94
	case STENCIL_PASS_DEPTH_FAIL                      = 0x0B95
	case STENCIL_PASS_DEPTH_PASS                      = 0x0B96
	case STENCIL_REF                                  = 0x0B97
	case STENCIL_WRITEMASK                            = 0x0B98
	case STENCIL_INDEX                                = 0x1901
	case KEEP                                         = 0x1E00
	case REPLACE                                      = 0x1E01
	case INCR                                         = 0x1E02
	case DECR                                         = 0x1E03
	case NONE                                         = 0
	case LEFT                                         = 0x0406
	case RIGHT                                        = 0x0407
	case FRONT_LEFT                                   = 0x0400
	case FRONT_RIGHT                                  = 0x0401
	case BACK_LEFT                                    = 0x0402
	case BACK_RIGHT                                   = 0x0403
	case AUX0                                         = 0x0409
	case AUX1                                         = 0x040A
	case AUX2                                         = 0x040B
	case AUX3                                         = 0x040C
	case COLOR_INDEX                                  = 0x1900
	case RED                                          = 0x1903
	case GREEN                                        = 0x1904
	case BLUE                                         = 0x1905
	case ALPHA                                        = 0x1906
	case LUMINANCE                                    = 0x1909
	case LUMINANCE_ALPHA                              = 0x190A
	case ALPHA_BITS                                   = 0x0D55
	case RED_BITS                                     = 0x0D52
	case GREEN_BITS                                   = 0x0D53
	case BLUE_BITS                                    = 0x0D54
	case INDEX_BITS                                   = 0x0D51
	case SUBPIXEL_BITS                                = 0x0D50
	case AUX_BUFFERS                                  = 0x0C00
	case READ_BUFFER                                  = 0x0C02
	case DRAW_BUFFER                                  = 0x0C01
	case DOUBLEBUFFER                                 = 0x0C32
	case STEREO                                       = 0x0C33
	case BITMAP                                       = 0x1A00
	case COLOR                                        = 0x1800
	case DEPTH                                        = 0x1801
	case STENCIL                                      = 0x1802
	case DITHER                                       = 0x0BD0
	case RGB                                          = 0x1907
	case RGBA                                         = 0x1908
	case MAX_LIST_NESTING                             = 0x0B31
	case MAX_EVAL_ORDER                               = 0x0D30
	case MAX_LIGHTS                                   = 0x0D31
	case MAX_CLIP_PLANES                              = 0x0D32
	case MAX_TEXTURE_SIZE                             = 0x0D33
	case MAX_PIXEL_MAP_TABLE                          = 0x0D34
	case MAX_ATTRIB_STACK_DEPTH                       = 0x0D35
	case MAX_MODELVIEW_STACK_DEPTH                    = 0x0D36
	case MAX_NAME_STACK_DEPTH                         = 0x0D37
	case MAX_PROJECTION_STACK_DEPTH                   = 0x0D38
	case MAX_TEXTURE_STACK_DEPTH                      = 0x0D39
	case MAX_VIEWPORT_DIMS                            = 0x0D3A
	case MAX_CLIENT_ATTRIB_STACK_DEPTH                = 0x0D3B
	case ATTRIB_STACK_DEPTH                           = 0x0BB0
	case CLIENT_ATTRIB_STACK_DEPTH                    = 0x0BB1
	case COLOR_CLEAR_VALUE                            = 0x0C22
	case COLOR_WRITEMASK                              = 0x0C23
	case CURRENT_INDEX                                = 0x0B01
	case CURRENT_COLOR                                = 0x0B00
	case CURRENT_NORMAL                               = 0x0B02
	case CURRENT_RASTER_COLOR                         = 0x0B04
	case CURRENT_RASTER_DISTANCE                      = 0x0B09
	case CURRENT_RASTER_INDEX                         = 0x0B05
	case CURRENT_RASTER_POSITION                      = 0x0B07
	case CURRENT_RASTER_TEXTURE_COORDS                = 0x0B06
	case CURRENT_RASTER_POSITION_VALID                = 0x0B08
	case CURRENT_TEXTURE_COORDS                       = 0x0B03
	case INDEX_CLEAR_VALUE                            = 0x0C20
	case INDEX_MODE                                   = 0x0C30
	case INDEX_WRITEMASK                              = 0x0C21
	case MODELVIEW_MATRIX                             = 0x0BA6
	case MODELVIEW_STACK_DEPTH                        = 0x0BA3
	case NAME_STACK_DEPTH                             = 0x0D70
	case PROJECTION_MATRIX                            = 0x0BA7
	case PROJECTION_STACK_DEPTH                       = 0x0BA4
	case RENDER_MODE                                  = 0x0C40
	case RGBA_MODE                                    = 0x0C31
	case TEXTURE_MATRIX                               = 0x0BA8
	case TEXTURE_STACK_DEPTH                          = 0x0BA5
	case VIEWPORT                                     = 0x0BA2
	case AUTO_NORMAL                                  = 0x0D80
	case MAP1_COLOR_4                                 = 0x0D90
	case MAP1_INDEX                                   = 0x0D91
	case MAP1_NORMAL                                  = 0x0D92
	case MAP1_TEXTURE_COORD_1                         = 0x0D93
	case MAP1_TEXTURE_COORD_2                         = 0x0D94
	case MAP1_TEXTURE_COORD_3                         = 0x0D95
	case MAP1_TEXTURE_COORD_4                         = 0x0D96
	case MAP1_VERTEX_3                                = 0x0D97
	case MAP1_VERTEX_4                                = 0x0D98
	case MAP2_COLOR_4                                 = 0x0DB0
	case MAP2_INDEX                                   = 0x0DB1
	case MAP2_NORMAL                                  = 0x0DB2
	case MAP2_TEXTURE_COORD_1                         = 0x0DB3
	case MAP2_TEXTURE_COORD_2                         = 0x0DB4
	case MAP2_TEXTURE_COORD_3                         = 0x0DB5
	case MAP2_TEXTURE_COORD_4                         = 0x0DB6
	case MAP2_VERTEX_3                                = 0x0DB7
	case MAP2_VERTEX_4                                = 0x0DB8
	case MAP1_GRID_DOMAIN                             = 0x0DD0
	case MAP1_GRID_SEGMENTS                           = 0x0DD1
	case MAP2_GRID_DOMAIN                             = 0x0DD2
	case MAP2_GRID_SEGMENTS                           = 0x0DD3
	case COEFF                                        = 0x0A00
	case ORDER                                        = 0x0A01
	case DOMAIN                                       = 0x0A02
	case PERSPECTIVE_CORRECTION_HINT                  = 0x0C50
	case POINT_SMOOTH_HINT                            = 0x0C51
	case LINE_SMOOTH_HINT                             = 0x0C52
	case POLYGON_SMOOTH_HINT                          = 0x0C53
	case FOG_HINT                                     = 0x0C54
	case DONT_CARE                                    = 0x1100
	case FASTEST                                      = 0x1101
	case NICEST                                       = 0x1102
	case SCISSOR_BOX                                  = 0x0C10
	case SCISSOR_TEST                                 = 0x0C11
	case MAP_COLOR                                    = 0x0D10
	case MAP_STENCIL                                  = 0x0D11
	case INDEX_SHIFT                                  = 0x0D12
	case INDEX_OFFSET                                 = 0x0D13
	case RED_SCALE                                    = 0x0D14
	case RED_BIAS                                     = 0x0D15
	case GREEN_SCALE                                  = 0x0D18
	case GREEN_BIAS                                   = 0x0D19
	case BLUE_SCALE                                   = 0x0D1A
	case BLUE_BIAS                                    = 0x0D1B
	case ALPHA_SCALE                                  = 0x0D1C
	case ALPHA_BIAS                                   = 0x0D1D
	case DEPTH_SCALE                                  = 0x0D1E
	case DEPTH_BIAS                                   = 0x0D1F
	case PIXEL_MAP_S_TO_S_SIZE                        = 0x0CB1
	case PIXEL_MAP_I_TO_I_SIZE                        = 0x0CB0
	case PIXEL_MAP_I_TO_R_SIZE                        = 0x0CB2
	case PIXEL_MAP_I_TO_G_SIZE                        = 0x0CB3
	case PIXEL_MAP_I_TO_B_SIZE                        = 0x0CB4
	case PIXEL_MAP_I_TO_A_SIZE                        = 0x0CB5
	case PIXEL_MAP_R_TO_R_SIZE                        = 0x0CB6
	case PIXEL_MAP_G_TO_G_SIZE                        = 0x0CB7
	case PIXEL_MAP_B_TO_B_SIZE                        = 0x0CB8
	case PIXEL_MAP_A_TO_A_SIZE                        = 0x0CB9
	case PIXEL_MAP_S_TO_S                             = 0x0C71
	case PIXEL_MAP_I_TO_I                             = 0x0C70
	case PIXEL_MAP_I_TO_R                             = 0x0C72
	case PIXEL_MAP_I_TO_G                             = 0x0C73
	case PIXEL_MAP_I_TO_B                             = 0x0C74
	case PIXEL_MAP_I_TO_A                             = 0x0C75
	case PIXEL_MAP_R_TO_R                             = 0x0C76
	case PIXEL_MAP_G_TO_G                             = 0x0C77
	case PIXEL_MAP_B_TO_B                             = 0x0C78
	case PIXEL_MAP_A_TO_A                             = 0x0C79
	case PACK_ALIGNMENT                               = 0x0D05
	case PACK_LSB_FIRST                               = 0x0D01
	case PACK_ROW_LENGTH                              = 0x0D02
	case PACK_SKIP_PIXELS                             = 0x0D04
	case PACK_SKIP_ROWS                               = 0x0D03
	case PACK_SWAP_BYTES                              = 0x0D00
	case UNPACK_ALIGNMENT                             = 0x0CF5
	case UNPACK_LSB_FIRST                             = 0x0CF1
	case UNPACK_ROW_LENGTH                            = 0x0CF2
	case UNPACK_SKIP_PIXELS                           = 0x0CF4
	case UNPACK_SKIP_ROWS                             = 0x0CF3
	case UNPACK_SWAP_BYTES                            = 0x0CF0
	case ZOOM_X                                       = 0x0D16
	case ZOOM_Y                                       = 0x0D17
	case TEXTURE_ENV                                  = 0x2300
	case TEXTURE_ENV_MODE                             = 0x2200
	case TEXTURE_1D                                   = 0x0DE0
	case TEXTURE_2D                                   = 0x0DE1
	case TEXTURE_WRAP_S                               = 0x2802
	case TEXTURE_WRAP_T                               = 0x2803
	case TEXTURE_MAG_FILTER                           = 0x2800
	case TEXTURE_MIN_FILTER                           = 0x2801
	case TEXTURE_ENV_COLOR                            = 0x2201
	case TEXTURE_GEN_S                                = 0x0C60
	case TEXTURE_GEN_T                                = 0x0C61
	case TEXTURE_GEN_R                                = 0x0C62
	case TEXTURE_GEN_Q                                = 0x0C63
	case TEXTURE_GEN_MODE                             = 0x2500
	case TEXTURE_BORDER_COLOR                         = 0x1004
	case TEXTURE_WIDTH                                = 0x1000
	case TEXTURE_HEIGHT                               = 0x1001
	case TEXTURE_BORDER                               = 0x1005
	case TEXTURE_COMPONENTS                           = 0x1003
	case TEXTURE_RED_SIZE                             = 0x805C
	case TEXTURE_GREEN_SIZE                           = 0x805D
	case TEXTURE_BLUE_SIZE                            = 0x805E
	case TEXTURE_ALPHA_SIZE                           = 0x805F
	case TEXTURE_LUMINANCE_SIZE                       = 0x8060
	case TEXTURE_INTENSITY_SIZE                       = 0x8061
	case NEAREST_MIPMAP_NEAREST                       = 0x2700
	case NEAREST_MIPMAP_LINEAR                        = 0x2702
	case LINEAR_MIPMAP_NEAREST                        = 0x2701
	case LINEAR_MIPMAP_LINEAR                         = 0x2703
	case OBJECT_LINEAR                                = 0x2401
	case OBJECT_PLANE                                 = 0x2501
	case EYE_LINEAR                                   = 0x2400
	case EYE_PLANE                                    = 0x2502
	case SPHERE_MAP                                   = 0x2402
	case DECAL                                        = 0x2101
	case MODULATE                                     = 0x2100
	case NEAREST                                      = 0x2600
	case REPEAT                                       = 0x2901
	case CLAMP                                        = 0x2900
	case S                                            = 0x2000
	case T                                            = 0x2001
	case R                                            = 0x2002
	case Q                                            = 0x2003
	case VENDOR                                       = 0x1F00
	case RENDERER                                     = 0x1F01
	case VERSION                                      = 0x1F02
	case EXTENSIONS                                   = 0x1F03
	case NO_ERROR                                     = 0
	case INVALID_ENUM                                 = 0x0500
	case INVALID_VALUE                                = 0x0501
	case INVALID_OPERATION                            = 0x0502
	case STACK_OVERFLOW                               = 0x0503
	case STACK_UNDERFLOW                              = 0x0504
	case OUT_OF_MEMORY                                = 0x0505
	case CURRENT_BIT                                  = 0x00000001
	case POINT_BIT                                    = 0x00000002
	case LINE_BIT                                     = 0x00000004
	case POLYGON_BIT                                  = 0x00000008
	case POLYGON_STIPPLE_BIT                          = 0x00000010
	case PIXEL_MODE_BIT                               = 0x00000020
	case LIGHTING_BIT                                 = 0x00000040
	case FOG_BIT                                      = 0x00000080
	case DEPTH_BUFFER_BIT                             = 0x00000100
	case ACCUM_BUFFER_BIT                             = 0x00000200
	case STENCIL_BUFFER_BIT                           = 0x00000400
	case VIEWPORT_BIT                                 = 0x00000800
	case TRANSFORM_BIT                                = 0x00001000
	case ENABLE_BIT                                   = 0x00002000
	case COLOR_BUFFER_BIT                             = 0x00004000
	case HINT_BIT                                     = 0x00008000
	case EVAL_BIT                                     = 0x00010000
	case LIST_BIT                                     = 0x00020000
	case TEXTURE_BIT                                  = 0x00040000
	case SCISSOR_BIT                                  = 0x00080000
	case ALL_ATTRIB_BITS                              = 0x000FFFFF

    // OpenGL 1.1
	case PROXY_TEXTURE_1D                             = 0x8063
	case PROXY_TEXTURE_2D                             = 0x8064
	case TEXTURE_PRIORITY                             = 0x8066
	case TEXTURE_RESIDENT                             = 0x8067
	case TEXTURE_BINDING_1D                           = 0x8068
	case TEXTURE_BINDING_2D                           = 0x8069
	case TEXTURE_INTERNAL_FORMAT                      = 0x1003
	case ALPHA4                                       = 0x803B
	case ALPHA8                                       = 0x803C
	case ALPHA12                                      = 0x803D
	case ALPHA16                                      = 0x803E
	case LUMINANCE4                                   = 0x803F
	case LUMINANCE8                                   = 0x8040
	case LUMINANCE12                                  = 0x8041
	case LUMINANCE16                                  = 0x8042
	case LUMINANCE4_ALPHA4                            = 0x8043
	case LUMINANCE6_ALPHA2                            = 0x8044
	case LUMINANCE8_ALPHA8                            = 0x8045
	case LUMINANCE12_ALPHA4                           = 0x8046
	case LUMINANCE12_ALPHA12                          = 0x8047
	case LUMINANCE16_ALPHA16                          = 0x8048
	case INTENSITY                                    = 0x8049
	case INTENSITY4                                   = 0x804A
	case INTENSITY8                                   = 0x804B
	case INTENSITY12                                  = 0x804C
	case INTENSITY16                                  = 0x804D
	case R3_G3_B2                                     = 0x2A10
	case RGB4                                         = 0x804F
	case RGB5                                         = 0x8050
	case RGB8                                         = 0x8051
	case RGB10                                        = 0x8052
	case RGB12                                        = 0x8053
	case RGB16                                        = 0x8054
	case RGBA2                                        = 0x8055
	case RGBA4                                        = 0x8056
	case RGB5_A1                                      = 0x8057
	case RGBA8                                        = 0x8058
	case RGB10_A2                                     = 0x8059
	case RGBA12                                       = 0x805A
	case RGBA16                                       = 0x805B
	case CLIENT_PIXEL_STORE_BIT                       = 0x00000001
	case CLIENT_VERTEX_ARRAY_BIT                      = 0x00000002
	case ALL_CLIENT_ATTRIB_BITS                       = 0xFFFFFFFF
	case CLIENT_ALL_ATTRIB_BITS                       = 0xFFFFFFFF


    // OpenGL 1.2
	case RESCALE_NORMAL                               = 0x803A
	case CLAMP_TO_EDGE                                = 0x812F
	case MAX_ELEMENTS_VERTICES                        = 0x80E8
	case MAX_ELEMENTS_INDICES                         = 0x80E9
	case BGR                                          = 0x80E0
	case BGRA                                         = 0x80E1
	case UNSIGNED_BYTE_3_3_2                          = 0x8032
	case UNSIGNED_BYTE_2_3_3_REV                      = 0x8362
	case UNSIGNED_SHORT_5_6_5                         = 0x8363
	case UNSIGNED_SHORT_5_6_5_REV                     = 0x8364
	case UNSIGNED_SHORT_4_4_4_4                       = 0x8033
	case UNSIGNED_SHORT_4_4_4_4_REV                   = 0x8365
	case UNSIGNED_SHORT_5_5_5_1                       = 0x8034
	case UNSIGNED_SHORT_1_5_5_5_REV                   = 0x8366
	case UNSIGNED_INT_8_8_8_8                         = 0x8035
	case UNSIGNED_INT_8_8_8_8_REV                     = 0x8367
	case UNSIGNED_INT_10_10_10_2                      = 0x8036
	case UNSIGNED_INT_2_10_10_10_REV                  = 0x8368
	case LIGHT_MODEL_COLOR_CONTROL                    = 0x81F8
	case SINGLE_COLOR                                 = 0x81F9
	case SEPARATE_SPECULAR_COLOR                      = 0x81FA
	case TEXTURE_MIN_LOD                              = 0x813A
	case TEXTURE_MAX_LOD                              = 0x813B
	case TEXTURE_BASE_LEVEL                           = 0x813C
	case TEXTURE_MAX_LEVEL                            = 0x813D
	case SMOOTH_POINT_SIZE_RANGE                      = 0x0B12
	case SMOOTH_POINT_SIZE_GRANULARITY                = 0x0B13
	case SMOOTH_LINE_WIDTH_RANGE                      = 0x0B22
	case SMOOTH_LINE_WIDTH_GRANULARITY                = 0x0B23
	case ALIASED_POINT_SIZE_RANGE                     = 0x846D
	case ALIASED_LINE_WIDTH_RANGE                     = 0x846E
	case PACK_SKIP_IMAGES                             = 0x806B
	case PACK_IMAGE_HEIGHT                            = 0x806C
	case UNPACK_SKIP_IMAGES                           = 0x806D
	case UNPACK_IMAGE_HEIGHT                          = 0x806E
	case TEXTURE_3D                                   = 0x806F
	case PROXY_TEXTURE_3D                             = 0x8070
	case TEXTURE_DEPTH                                = 0x8071
	case TEXTURE_WRAP_R                               = 0x8072
	case MAX_3D_TEXTURE_SIZE                          = 0x8073
	case TEXTURE_BINDING_3D                           = 0x806A


    // GL_ARB_imaging
	case CONSTANT_COLOR                               = 0x8001
	case ONE_MINUS_NT_COLOR                           = 0x8002
	case CONSTANT_ALPHA                               = 0x8003
	case ONE_MINUS_NT_ALPHA                           = 0x8004
	case COLOR_TABLE                                  = 0x80D0
	case POST_CONVOLUTION_COLOR_TABLE                 = 0x80D1
	case POST_COLOR_MATRIX_COLOR_TABLE                = 0x80D2
	case PROXY_COLOR_TABLE                            = 0x80D3
	case PROXY_POST_CONVOLUTION_COLOR_TABLE           = 0x80D4
	case PROXY_POST_COLOR_MATRIX_COLOR_TABLE          = 0x80D5
	case COLOR_TABLE_SCALE                            = 0x80D6
	case COLOR_TABLE_BIAS                             = 0x80D7
	case COLOR_TABLE_FORMAT                           = 0x80D8
	case COLOR_TABLE_WIDTH                            = 0x80D9
	case COLOR_TABLE_RED_SIZE                         = 0x80DA
	case COLOR_TABLE_GREEN_SIZE                       = 0x80DB
	case COLOR_TABLE_BLUE_SIZE                        = 0x80DC
	case COLOR_TABLE_ALPHA_SIZE                       = 0x80DD
	case COLOR_TABLE_LUMINANCE_SIZE                   = 0x80DE
	case COLOR_TABLE_INTENSITY_SIZE                   = 0x80DF
	case CONVOLUTION_1D                               = 0x8010
	case CONVOLUTION_2D                               = 0x8011
	case SEPARABLE_2D                                 = 0x8012
	case CONVOLUTION_BORDER_MODE                      = 0x8013
	case CONVOLUTION_FILTER_SCALE                     = 0x8014
	case CONVOLUTION_FILTER_BIAS                      = 0x8015
	case REDUCE                                       = 0x8016
	case CONVOLUTION_FORMAT                           = 0x8017
	case CONVOLUTION_WIDTH                            = 0x8018
	case CONVOLUTION_HEIGHT                           = 0x8019
	case MAX_CONVOLUTION_WIDTH                        = 0x801A
	case MAX_CONVOLUTION_HEIGHT                       = 0x801B
	case POST_CONVOLUTION_RED_SCALE                   = 0x801C
	case POST_CONVOLUTION_GREEN_SCALE                 = 0x801D
	case POST_CONVOLUTION_BLUE_SCALE                  = 0x801E
	case POST_CONVOLUTION_ALPHA_SCALE                 = 0x801F
	case POST_CONVOLUTION_RED_BIAS                    = 0x8020
	case POST_CONVOLUTION_GREEN_BIAS                  = 0x8021
	case POST_CONVOLUTION_BLUE_BIAS                   = 0x8022
	case POST_CONVOLUTION_ALPHA_BIAS                  = 0x8023
	case CONSTANT_BORDER                              = 0x8151
	case REPLICATE_BORDER                             = 0x8153
	case CONVOLUTION_BORDER_COLOR                     = 0x8154
	case COLOR_MATRIX                                 = 0x80B1
	case COLOR_MATRIX_STACK_DEPTH                     = 0x80B2
	case MAX_COLOR_MATRIX_STACK_DEPTH                 = 0x80B3
	case POST_COLOR_MATRIX_RED_SCALE                  = 0x80B4
	case POST_COLOR_MATRIX_GREEN_SCALE                = 0x80B5
	case POST_COLOR_MATRIX_BLUE_SCALE                 = 0x80B6
	case POST_COLOR_MATRIX_ALPHA_SCALE                = 0x80B7
	case POST_COLOR_MATRIX_RED_BIAS                   = 0x80B8
	case POST_COLOR_MATRIX_GREEN_BIAS                 = 0x80B9
	case POST_COLOR_MATRIX_BLUE_BIAS                  = 0x80BA
	case POST_COLOR_MATRIX_ALPHA_BIAS                 = 0x80BB
	case HISTOGRAM                                    = 0x8024
	case PROXY_HISTOGRAM                              = 0x8025
	case HISTOGRAM_WIDTH                              = 0x8026
	case HISTOGRAM_FORMAT                             = 0x8027
	case HISTOGRAM_RED_SIZE                           = 0x8028
	case HISTOGRAM_GREEN_SIZE                         = 0x8029
	case HISTOGRAM_BLUE_SIZE                          = 0x802A
	case HISTOGRAM_ALPHA_SIZE                         = 0x802B
	case HISTOGRAM_LUMINANCE_SIZE                     = 0x802C
	case HISTOGRAM_SINK                               = 0x802D
	case MINMAX                                       = 0x802E
	case MINMAX_FORMAT                                = 0x802F
	case MINMAX_SINK                                  = 0x8030
	case TABLE_TOO_LARGE                              = 0x8031
	case BLEND_EQUATION                               = 0x8009
	case MIN                                          = 0x8007
	case MAX                                          = 0x8008
	case FUNC_ADD                                     = 0x8006
	case FUNC_SUBTRACT                                = 0x800A
	case FUNC_REVERSE_SUBTRACT                        = 0x800B
	case BLEND_COLOR                                  = 0x8005



    // OpenGL 1.3
	case TEXTURE0                                     = 0x84C0
	case TEXTURE1                                     = 0x84C1
	case TEXTURE2                                     = 0x84C2
	case TEXTURE3                                     = 0x84C3
	case TEXTURE4                                     = 0x84C4
	case TEXTURE5                                     = 0x84C5
	case TEXTURE6                                     = 0x84C6
	case TEXTURE7                                     = 0x84C7
	case TEXTURE8                                     = 0x84C8
	case TEXTURE9                                     = 0x84C9
	case TEXTURE10                                    = 0x84CA
	case TEXTURE11                                    = 0x84CB
	case TEXTURE12                                    = 0x84CC
	case TEXTURE13                                    = 0x84CD
	case TEXTURE14                                    = 0x84CE
	case TEXTURE15                                    = 0x84CF
	case TEXTURE16                                    = 0x84D0
	case TEXTURE17                                    = 0x84D1
	case TEXTURE18                                    = 0x84D2
	case TEXTURE19                                    = 0x84D3
	case TEXTURE20                                    = 0x84D4
	case TEXTURE21                                    = 0x84D5
	case TEXTURE22                                    = 0x84D6
	case TEXTURE23                                    = 0x84D7
	case TEXTURE24                                    = 0x84D8
	case TEXTURE25                                    = 0x84D9
	case TEXTURE26                                    = 0x84DA
	case TEXTURE27                                    = 0x84DB
	case TEXTURE28                                    = 0x84DC
	case TEXTURE29                                    = 0x84DD
	case TEXTURE30                                    = 0x84DE
	case TEXTURE31                                    = 0x84DF
	case ACTIVE_TEXTURE                               = 0x84E0
	case CLIENT_ACTIVE_TEXTURE                        = 0x84E1
	case MAX_TEXTURE_UNITS                            = 0x84E2
	case NORMAL_MAP                                   = 0x8511
	case REFLECTION_MAP                               = 0x8512
	case TEXTURE_CUBE_MAP                             = 0x8513
	case TEXTURE_BINDING_CUBE_MAP                     = 0x8514
	case TEXTURE_CUBE_MAP_POSITIVE_X                  = 0x8515
	case TEXTURE_CUBE_MAP_NEGATIVE_X                  = 0x8516
	case TEXTURE_CUBE_MAP_POSITIVE_Y                  = 0x8517
	case TEXTURE_CUBE_MAP_NEGATIVE_Y                  = 0x8518
	case TEXTURE_CUBE_MAP_POSITIVE_Z                  = 0x8519
	case TEXTURE_CUBE_MAP_NEGATIVE_Z                  = 0x851A
	case PROXY_TEXTURE_CUBE_MAP                       = 0x851B
	case MAX_CUBE_MAP_TEXTURE_SIZE                    = 0x851C
	case COMPRESSED_ALPHA                             = 0x84E9
	case COMPRESSED_LUMINANCE                         = 0x84EA
	case COMPRESSED_LUMINANCE_ALPHA                   = 0x84EB
	case COMPRESSED_INTENSITY                         = 0x84EC
	case COMPRESSED_RGB                               = 0x84ED
	case COMPRESSED_RGBA                              = 0x84EE
	case TEXTURE_COMPRESSION_HINT                     = 0x84EF
	case TEXTURE_COMPRESSED_IMAGE_SIZE                = 0x86A0
	case TEXTURE_COMPRESSED                           = 0x86A1
	case NUM_COMPRESSED_TEXTURE_FORMATS               = 0x86A2
	case COMPRESSED_TEXTURE_FORMATS                   = 0x86A3
	case MULTISAMPLE                                  = 0x809D
	case SAMPLE_ALPHA_TO_COVERAGE                     = 0x809E
	case SAMPLE_ALPHA_TO_ONE                          = 0x809F
	case SAMPLE_COVERAGE                              = 0x80A0
	case SAMPLE_BUFFERS                               = 0x80A8
	case SAMPLES                                      = 0x80A9
	case SAMPLE_COVERAGE_VALUE                        = 0x80AA
	case SAMPLE_COVERAGE_INVERT                       = 0x80AB
	case MULTISAMPLE_BIT                              = 0x20000000
	case TRANSPOSE_MODELVIEW_MATRIX                   = 0x84E3
	case TRANSPOSE_PROJECTION_MATRIX                  = 0x84E4
	case TRANSPOSE_TEXTURE_MATRIX                     = 0x84E5
	case TRANSPOSE_COLOR_MATRIX                       = 0x84E6
	case COMBINE                                      = 0x8570
	case COMBINE_RGB                                  = 0x8571
	case COMBINE_ALPHA                                = 0x8572
	case SOURCE0_RGB                                  = 0x8580
	case SOURCE1_RGB                                  = 0x8581
	case SOURCE2_RGB                                  = 0x8582
	case SOURCE0_ALPHA                                = 0x8588
	case SOURCE1_ALPHA                                = 0x8589
	case SOURCE2_ALPHA                                = 0x858A
	case OPERAND0_RGB                                 = 0x8590
	case OPERAND1_RGB                                 = 0x8591
	case OPERAND2_RGB                                 = 0x8592
	case OPERAND0_ALPHA                               = 0x8598
	case OPERAND1_ALPHA                               = 0x8599
	case OPERAND2_ALPHA                               = 0x859A
	case RGB_SCALE                                    = 0x8573
	case ADD_SIGNED                                   = 0x8574
	case INTERPOLATE                                  = 0x8575
	case SUBTRACT                                     = 0x84E7
	case NT                                           = 0x8576
	case PRIMARY_COLOR                                = 0x8577
	case PREVIOUS                                     = 0x8578
	case DOT3_RGB                                     = 0x86AE
	case DOT3_RGBA                                    = 0x86AF
	case CLAMP_TO_BORDER                              = 0x812D

    // GL_ARB_multitexture (ARB extension 1 and OpenGL 1.2.1)
	case ARB_multitexture                             = 1
	case TEXTURE0_ARB                                 = 0x84C0
	case TEXTURE1_ARB                                 = 0x84C1
	case TEXTURE2_ARB                                 = 0x84C2
	case TEXTURE3_ARB                                 = 0x84C3
	case TEXTURE4_ARB                                 = 0x84C4
	case TEXTURE5_ARB                                 = 0x84C5
	case TEXTURE6_ARB                                 = 0x84C6
	case TEXTURE7_ARB                                 = 0x84C7
	case TEXTURE8_ARB                                 = 0x84C8
	case TEXTURE9_ARB                                 = 0x84C9
	case TEXTURE10_ARB                                = 0x84CA
	case TEXTURE11_ARB                                = 0x84CB
	case TEXTURE12_ARB                                = 0x84CC
	case TEXTURE13_ARB                                = 0x84CD
	case TEXTURE14_ARB                                = 0x84CE
	case TEXTURE15_ARB                                = 0x84CF
	case TEXTURE16_ARB                                = 0x84D0
	case TEXTURE17_ARB                                = 0x84D1
	case TEXTURE18_ARB                                = 0x84D2
	case TEXTURE19_ARB                                = 0x84D3
	case TEXTURE20_ARB                                = 0x84D4
	case TEXTURE21_ARB                                = 0x84D5
	case TEXTURE22_ARB                                = 0x84D6
	case TEXTURE23_ARB                                = 0x84D7
	case TEXTURE24_ARB                                = 0x84D8
	case TEXTURE25_ARB                                = 0x84D9
	case TEXTURE26_ARB                                = 0x84DA
	case TEXTURE27_ARB                                = 0x84DB
	case TEXTURE28_ARB                                = 0x84DC
	case TEXTURE29_ARB                                = 0x84DD
	case TEXTURE30_ARB                                = 0x84DE
	case TEXTURE31_ARB                                = 0x84DF
	case ACTIVE_TEXTURE_ARB                           = 0x84E0
	case CLIENT_ACTIVE_TEXTURE_ARB                    = 0x84E1
	case MAX_TEXTURE_UNITS_ARB                        = 0x84E2
}


// glu
public ffi fn gluPerspective(fovy: f64, aspect: f64, znear: f64, zfar: f64) -> void



public ffi fn glClearIndex(c: f32) -> void
public ffi fn glClearColor(red: f32, green: f32, blue: f32, alpha: f32) -> void
public ffi fn glClear(mask: GL) -> void
public ffi fn glIndexMask(mask: u32) -> void
public ffi fn glColorMask(red: bool, green: bool, blue: bool, alpha: bool) -> void
public ffi fn glAlphaFunc(f: u32, ref: f32) -> void
public ffi fn glBlendFunc(sfactor: u32, dfactor: u32) -> void
public ffi fn glLogicOp(opcode: u32) -> void
public ffi fn glCullFace(mode: u32) -> void
public ffi fn glFrontFace(mode: u32) -> void
public ffi fn glPointSize(size: f32) -> void
public ffi fn glLineWidth(width: f32) -> void
public ffi fn glLineStipple(factor: i32, pattern: u16) -> void
public ffi fn glPolygonMode(face: u32, mode: u32) -> void
public ffi fn glPolygonOffset(factor: f32, units: f32) -> void
public ffi fn glPolygonStipple(mask: i8*) -> void
public ffi fn glGetPolygonStipple(mask: i8*) -> void
public ffi fn glEdgeFlag(flag: bool) -> void
public ffi fn glEdgeFlagv(flag: bool*) -> void
public ffi fn glScissor(x: i32, y: i32, width: i32, height: i32) -> void
public ffi fn glClipPlane(plane: u32, equation: f64*) -> void
public ffi fn glGetClipPlane(plane: u32, equation: f64*) -> void
public ffi fn glDrawBuffer(mode: u32) -> void
public ffi fn glReadBuffer(mode: u32) -> void
public ffi fn glEnable(cap: GL) -> void
public ffi fn glDisable(cap: GL) -> void
public ffi fn glIsEnabled(cap: u32) -> bool
public ffi fn glEnableClientState(cap: GL) -> void
public ffi fn glDisableClientState(cap: GL) -> void
public ffi fn glGetBooleanv(pname: u32, params: bool*) -> void
public ffi fn glGetDoublev(pname: u32, params: f64*) -> void
public ffi fn glGetFloatv(pname: u32, params: f32*) -> void
public ffi fn glGetIntegerv(pname: u32, params: i32*) -> void
public ffi fn glPushAttrib(mask: u32) -> void
public ffi fn glPopAttrib() -> void
public ffi fn glPushClientAttrib(mask: u32) -> void
public ffi fn glPopClientAttrib() -> void
public ffi fn glRenderMode(mode: u32) -> i32
public ffi fn glGetError() -> u32
public ffi fn glGetString(name: u32) -> i8*
public ffi fn glFinish() -> void
public ffi fn glFlush() -> void
public ffi fn glHint(target: u32, mode: u32) -> void

// Depth Buffer
public ffi fn glClearDepth(depth: f64) -> void
public ffi fn glDepthFunc(f: GL) -> void
public ffi fn glDepthMask(flag: bool) -> void
public ffi fn glDepthRange(near_val: f64, far_val: f64) -> void

// Accumulation Buffer
public ffi fn glClearAccum(red: f32, green: f32, blue: f32, alpha: f32) -> void
public ffi fn glAccum(op: u32, value: f32) -> void

// Transformation
public ffi fn glMatrixMode(mode: GL) -> void
public ffi fn glOrtho(left: f64, right: f64, bottom: f64, top: f64, near_val: f64, far_val: f64) -> void
public ffi fn glFrustum(left: f64, right: f64, bottom: f64, top: f64, near_val: f64, far_val: f64) -> void
public ffi fn glViewport(x: i32, y: i32, width: i32, height: i32) -> void
public ffi fn glPushMatrix() -> void
public ffi fn glPopMatrix() -> void
public ffi fn glLoadIdentity() -> void
public ffi fn glLoadMatrixd(m: f64*) -> void
public ffi fn glLoadMatrixf(m: f32*) -> void
public ffi fn glMultMatrixd(m: f64*) -> void
public ffi fn glMultMatrixf(m: f32*) -> void
public ffi fn glRotated(angle: f64, x: f64, y: f64, z: f64) -> void
public ffi fn glRotatef(angle: f32, x: f32, y: f32, z: f32) -> void
public ffi fn glScaled(x: f64, y: f64, z: f64) -> void
public ffi fn glScalef(x: f32, y: f32, z: f32) -> void
public ffi fn glTranslated(x: f64, y: f64, z: f64) -> void
public ffi fn glTranslatef(x: f32, y: f32, z: f32) -> void


// Display Lists
public ffi fn glIsList(list: u32) -> bool
public ffi fn glDeleteLists(list: u32, range: i32) -> void
public ffi fn glGenLists(range: i32) -> u32
public ffi fn glNewList(list: u32, mode: u32) -> void
public ffi fn glEndList() -> void
public ffi fn glCallList(list: u32) -> void
public ffi fn glCallLists(n: i32, type: u32, lists: void*) -> void
public ffi fn glListBase(base: u32) -> void

// Drawing Functions
public ffi fn glBegin(mode: GL) -> void
public ffi fn glEnd() -> void
public ffi fn glVertex2d(x: f64, y: f64) -> void
public ffi fn glVertex2f(x: f32, y: f32) -> void
public ffi fn glVertex2i(x: i32, y: i32) -> void
public ffi fn glVertex2s(x: i16, y: i16) -> void
public ffi fn glVertex3d(x: f64, y: f64, z: f64) -> void
public ffi fn glVertex3f(x: f32, y: f32, z: f32) -> void
public ffi fn glVertex3i(x: i32, y: i32, z: i32) -> void
public ffi fn glVertex3s(x: i16, y: i16, z: i16) -> void
public ffi fn glVertex4d(x: f64, y: f64, z: f64, w: f64) -> void
public ffi fn glVertex4f(x: f32, y: f32, z: f32, w: f32) -> void
public ffi fn glVertex4i(x: i32, y: i32, z: i32, w: i32) -> void
public ffi fn glVertex4s(x: i16, y: i16, z: i16, w: i16) -> void
public ffi fn glVertex2dv(v: f64*) -> void
public ffi fn glVertex2fv(v: f32*) -> void
public ffi fn glVertex2iv(v: i32*) -> void
public ffi fn glVertex2sv(v: i16*) -> void
public ffi fn glVertex3dv(v: f64*) -> void
public ffi fn glVertex3fv(v: f32*) -> void
public ffi fn glVertex3iv(v: i32*) -> void
public ffi fn glVertex3sv(v: i16*) -> void
public ffi fn glVertex4dv(v: f64*) -> void
public ffi fn glVertex4fv(v: f32*) -> void
public ffi fn glVertex4iv(v: i32*) -> void
public ffi fn glVertex4sv(v: i16*) -> void
public ffi fn glNormal3b(nx: i8, ny: i8, nz: i8) -> void
public ffi fn glNormal3d(nx: f64, ny: f64, nz: f64) -> void
public ffi fn glNormal3f(nx: f32, ny: f32, nz: f32) -> void
public ffi fn glNormal3i(nx: i32, ny: i32, nz: i32) -> void
public ffi fn glNormal3s(nx: i16, ny: i16, nz: i16) -> void
public ffi fn glNormal3bv(v: i8*) -> void
public ffi fn glNormal3dv(v: f64*) -> void
public ffi fn glNormal3fv(v: f32*) -> void
public ffi fn glNormal3iv(v: i32*) -> void
public ffi fn glNormal3sv(v: i16*) -> void
public ffi fn glIndexd(c: f64) -> void
public ffi fn glIndexf(c: f32) -> void
public ffi fn glIndexi(c: i32) -> void
public ffi fn glIndexs(c: i16) -> void
public ffi fn glIndexub(c: i8) -> void
public ffi fn glIndexdv(c: f64*) -> void
public ffi fn glIndexfv(c: f32*) -> void
public ffi fn glIndexiv(c: i32*) -> void
public ffi fn glIndexsv(c: i16*) -> void
public ffi fn glIndexubv(c: i8*) -> void
public ffi fn glColor3b(red: i8, green: i8, blue: i8) -> void
public ffi fn glColor3d(red: f64, green: f64, blue: f64) -> void
public ffi fn glColor3f(red: f32, green: f32, blue: f32) -> void
public ffi fn glColor3i(red: i32, green: i32, blue: i32) -> void
public ffi fn glColor3s(red: i16, green: i16, blue: i16) -> void
public ffi fn glColor3ub(red: i8, green: i8, blue: i8) -> void
public ffi fn glColor3ui(red: u32, green: u32, blue: u32) -> void
public ffi fn glColor3us(red: u16, green: u16, blue: u16) -> void
public ffi fn glColor4b(red: i8, green: i8, blue: i8, alpha: i8) -> void
public ffi fn glColor4d(red: f64, green: f64, blue: f64, alpha: f64) -> void
public ffi fn glColor4f(red: f32, green: f32, blue: f32, alpha: f32) -> void
public ffi fn glColor4i(red: i32, green: i32, blue: i32, alpha: i32) -> void
public ffi fn glColor4s(red: i16, green: i16, blue: i16, alpha: i16) -> void
public ffi fn glColor4ub(red: i8, green: i8, blue: i8, alpha: i8) -> void
public ffi fn glColor4ui(red: u32, green: u32, blue: u32, alpha: u32) -> void
public ffi fn glColor4us(red: u16, green: u16, blue: u16, alpha: u16) -> void
public ffi fn glColor3bv(v: i8*) -> void
public ffi fn glColor3dv(v: f64*) -> void
public ffi fn glColor3fv(v: f32*) -> void
public ffi fn glColor3iv(v: i32*) -> void
public ffi fn glColor3sv(v: i16*) -> void
public ffi fn glColor3ubv(v: i8*) -> void
public ffi fn glColor3uiv(v: u32*) -> void
public ffi fn glColor3usv(v: u16*) -> void
public ffi fn glColor4bv(v: i8*) -> void
public ffi fn glColor4dv(v: f64*) -> void
public ffi fn glColor4fv(v: f32*) -> void
public ffi fn glColor4iv(v: i32*) -> void
public ffi fn glColor4sv(v: i16*) -> void
public ffi fn glColor4ubv(v: i8*) -> void
public ffi fn glColor4uiv(v: u32*) -> void
public ffi fn glColor4usv(v: u16*) -> void
public ffi fn glTexCoord1d(s: f64) -> void
public ffi fn glTexCoord1f(s: f32) -> void
public ffi fn glTexCoord1i(s: i32) -> void
public ffi fn glTexCoord1s(s: i16) -> void
public ffi fn glTexCoord2d(s: f64, t: f64) -> void
public ffi fn glTexCoord2f(s: f32, t: f32) -> void
public ffi fn glTexCoord2i(s: i32, t: i32) -> void
public ffi fn glTexCoord2s(s: i16, t: i16) -> void
public ffi fn glTexCoord3d(s: f64, t: f64, r: f64) -> void
public ffi fn glTexCoord3f(s: f32, t: f32, r: f32) -> void
public ffi fn glTexCoord3i(s: i32, t: i32, r: i32) -> void
public ffi fn glTexCoord3s(s: i16, t: i16, r: i16) -> void
public ffi fn glTexCoord4d(s: f64, t: f64, r: f64, q: f64) -> void
public ffi fn glTexCoord4f(s: f32, t: f32, r: f32, q: f32) -> void
public ffi fn glTexCoord4i(s: i32, t: i32, r: i32, q: i32) -> void
public ffi fn glTexCoord4s(s: i16, t: i16, r: i16, q: i16) -> void
public ffi fn glTexCoord1dv(v: f64*) -> void
public ffi fn glTexCoord1fv(v: f32*) -> void
public ffi fn glTexCoord1iv(v: i32*) -> void
public ffi fn glTexCoord1sv(v: i16*) -> void
public ffi fn glTexCoord2dv(v: f64*) -> void
public ffi fn glTexCoord2fv(v: f32*) -> void
public ffi fn glTexCoord2iv(v: i32*) -> void
public ffi fn glTexCoord2sv(v: i16*) -> void
public ffi fn glTexCoord3dv(v: f64*) -> void
public ffi fn glTexCoord3fv(v: f32*) -> void
public ffi fn glTexCoord3iv(v: i32*) -> void
public ffi fn glTexCoord3sv(v: i16*) -> void
public ffi fn glTexCoord4dv(v: f64*) -> void
public ffi fn glTexCoord4fv(v: f32*) -> void
public ffi fn glTexCoord4iv(v: i32*) -> void
public ffi fn glTexCoord4sv(v: i16*) -> void
public ffi fn glRasterPos2d(x: f64, y: f64) -> void
public ffi fn glRasterPos2f(x: f32, y: f32) -> void
public ffi fn glRasterPos2i(x: i32, y: i32) -> void
public ffi fn glRasterPos2s(x: i16, y: i16) -> void
public ffi fn glRasterPos3d(x: f64, y: f64, z: f64) -> void
public ffi fn glRasterPos3f(x: f32, y: f32, z: f32) -> void
public ffi fn glRasterPos3i(x: i32, y: i32, z: i32) -> void
public ffi fn glRasterPos3s(x: i16, y: i16, z: i16) -> void
public ffi fn glRasterPos4d(x: f64, y: f64, z: f64, w: f64) -> void
public ffi fn glRasterPos4f(x: f32, y: f32, z: f32, w: f32) -> void
public ffi fn glRasterPos4i(x: i32, y: i32, z: i32, w: i32) -> void
public ffi fn glRasterPos4s(x: i16, y: i16, z: i16, w: i16) -> void
public ffi fn glRasterPos2dv(v: f64*) -> void
public ffi fn glRasterPos2fv(v: f32*) -> void
public ffi fn glRasterPos2iv(v: i32*) -> void
public ffi fn glRasterPos2sv(v: i16*) -> void
public ffi fn glRasterPos3dv(v: f64*) -> void
public ffi fn glRasterPos3fv(v: f32*) -> void
public ffi fn glRasterPos3iv(v: i32*) -> void
public ffi fn glRasterPos3sv(v: i16*) -> void
public ffi fn glRasterPos4dv(v: f64*) -> void
public ffi fn glRasterPos4fv(v: f32*) -> void
public ffi fn glRasterPos4iv(v: i32*) -> void
public ffi fn glRasterPos4sv(v: i16*) -> void
public ffi fn glRectd(x1: f64, y1: f64, x2: f64, y2: f64) -> void
public ffi fn glRectf(x1: f32, y1: f32, x2: f32, y2: f32) -> void
public ffi fn glRecti(x1: i32, y1: i32, x2: i32, y2: i32) -> void
public ffi fn glRects(x1: i16, y1: i16, x2: i16, y2: i16) -> void
public ffi fn glRectdv(v1: f64*, v2: f64*) -> void
public ffi fn glRectfv(v1: f32*, v2: f32*) -> void
public ffi fn glRectiv(v1: i32*, v2: i32*) -> void
public ffi fn glRectsv(v1: i16*, v2: i16*) -> void


// Vertex Arrays
public ffi fn glVertexPointer(size: i32, type: GL, stride: i32, ptr: void*) -> void
public ffi fn glNormalPointer(type: GL, stride: i32, ptr: void*) -> void
public ffi fn glColorPointer(size: i32, type: GL, stride: i32, ptr: void*) -> void
public ffi fn glIndexPointer(type: GL, stride: i32, ptr: void*) -> void
public ffi fn glTexCoordPointer(size: i32, type: GL, stride: i32, ptr: void*) -> void
public ffi fn glEdgeFlagPointer(stride: i32, ptr: void*) -> void
public ffi fn glGetPointerv(pname: u32, params: void**) -> void
public ffi fn glArrayElement(i: i32) -> void
public ffi fn glDrawArrays(mode: GL, first: i32, count: i32) -> void
public ffi fn glDrawElements(mode: GL, count: i32, type: GL, indices: void*) -> void
public ffi fn glInterleavedArrays(format: u32, stride: i32, pointer: void*) -> void

// Lighting
public ffi fn glShadeModel(mode: u32) -> void
public ffi fn glLightf(light: u32, pname: u32, param: f32) -> void
public ffi fn glLighti(light: u32, pname: u32, param: i32) -> void
public ffi fn glLightfv(light: u32, pname: u32, params: f32*) -> void
public ffi fn glLightiv(light: u32, pname: u32, params: i32*) -> void
public ffi fn glGetLightfv(light: u32, pname: u32, params: f32*) -> void
public ffi fn glGetLightiv(light: u32, pname: u32, params: i32*) -> void
public ffi fn glLightModelf(pname: u32, param: f32) -> void
public ffi fn glLightModeli(pname: u32, param: i32) -> void
public ffi fn glLightModelfv(pname: u32, params: f32*) -> void
public ffi fn glLightModeliv(pname: u32, params: i32*) -> void
public ffi fn glMaterialf(face: u32, pname: u32, param: f32) -> void
public ffi fn glMateriali(face: u32, pname: u32, param: i32) -> void
public ffi fn glMaterialfv(face: u32, pname: u32, params: f32*) -> void
public ffi fn glMaterialiv(face: u32, pname: u32, params: i32*) -> void
public ffi fn glGetMaterialfv(face: u32, pname: u32, params: f32*) -> void
public ffi fn glGetMaterialiv(face: u32, pname: u32, params: i32*) -> void
public ffi fn glColorMaterial(face: u32, mode: u32) -> void


// Raster Functions
public ffi fn glPixelZoom(xfactor: f32, yfactor: f32) -> void
public ffi fn glPixelStoref(pname: u32, param: f32) -> void
public ffi fn glPixelStorei(pname: u32, param: i32) -> void
public ffi fn glPixelTransferf(pname: u32, param: f32) -> void
public ffi fn glPixelTransferi(pname: u32, param: i32) -> void
public ffi fn glPixelMapfv(map: u32, mapsize: i32, values: f32*) -> void
public ffi fn glPixelMapuiv(map: u32, mapsize: i32, values: u32*) -> void
public ffi fn glPixelMapusv(map: u32, mapsize: i32, values: u16*) -> void
public ffi fn glGetPixelMapfv(map: u32, values: f32*) -> void
public ffi fn glGetPixelMapuiv(map: u32, values: u32*) -> void
public ffi fn glGetPixelMapusv(map: u32, values: u16*) -> void
public ffi fn glBitmap(width: i32, height: i32, xorig: f32, yorig: f32, xmove: f32,
    ymove: f32, bitmap: i8*) -> void
public ffi fn glReadPixels(x: i32, y: i32, width: i32, height: i32, format: u32, type: u32, pixels: void*) -> void
public ffi fn glDrawPixels(width: i32, height: i32, format: u32, type: u32, pixels: void*) -> void
public ffi fn glCopyPixels(x: i32, y: i32, width: i32, height: i32, type: u32) -> void

// Stenciling
public ffi fn glStencilFunc(f: u32, ref: i32, mask: u32) -> void
public ffi fn glStencilMask(mask: u32) -> void
public ffi fn glStencilOp(fail: u32, zfail: u32, zpass: u32) -> void
public ffi fn glClearStencil(s: i32) -> void

// Texture Mapping
public ffi fn glTexGend(coord: u32, pname: u32, param: f64) -> void
public ffi fn glTexGenf(coord: u32, pname: u32, param: f32) -> void
public ffi fn glTexGeni(coord: u32, pname: u32, param: i32) -> void
public ffi fn glTexGendv(coord: u32, pname: u32, params: f64) -> void
public ffi fn glTexGenfv(coord: u32, pname: u32, params: f32) -> void
public ffi fn glTexGeniv(coord: u32, pname: u32, params: i32) -> void
public ffi fn glGetTexGendv(coord: u32, pname: u32, params: f64) -> void
public ffi fn glGetTexGenfv(coord: u32, pname: u32, params: f32) -> void
public ffi fn glGetTexGeniv(coord: u32, pname: u32, params: i32) -> void
public ffi fn glTexEnvf(target: u32, pname: u32, param: f32) -> void
public ffi fn glTexEnvi(target: u32, pname: u32, param: i32) -> void
public ffi fn glTexEnvfv(target: u32, pname: u32, params: f32) -> void
public ffi fn glTexEnviv(target: u32, pname: u32, params: i32) -> void
public ffi fn glGetTexEnvfv(target: u32, pname: u32, params: f32) -> void
public ffi fn glGetTexEnviv(target: u32, pname: u32, params: i32) -> void
public ffi fn glTexParameterf(target: u32, pname: u32, param: f32) -> void
public ffi fn glTexParameteri(target: u32, pname: u32, param: i32) -> void
public ffi fn glTexParameterfv(target: u32, pname: u32, params: f32) -> void
public ffi fn glTexParameteriv(target: u32, pname: u32, params: i32) -> void
public ffi fn glGetTexParameterfv(target: u32, pname: u32, params: f32) -> void
public ffi fn glGetTexParameteriv(target: u32, pname: u32, params: i32) -> void
public ffi fn glGetTexLevelParameterfv(target: u32, level: i32, pname: u32, params: f32*) -> void
public ffi fn glGetTexLevelParameteriv(target: u32, level: i32, pname: u32, params: i32*) -> void
public ffi fn glTexImage1D(target: u32, level: i32, internalFormat: i32, width: i32, border: i32,
    format: u32, type: u32, pixels: void*) -> void
public ffi fn glTexImage2D(target: u32, level: i32, internalFormat: i32, width: i32, height: i32,
    border: i32, format: u32, type: u32, pixels: void*) -> void
public ffi fn glGetTexImage(target: u32, level: i32, format: u32, type: u32, pixels: void*) -> void

// OpenGL 1.1 functions
public ffi fn glGenTextures(n: i32, textures: u32*) -> void
public ffi fn glDeleteTextures(n: i32, textures: u32*) -> void
public ffi fn glBindTexture(target: u32, texture: u32) -> void
public ffi fn glPrioritizeTextures(n: i32, textures: u32*, priorities: f32*) -> void
public ffi fn glAreTexturesResident(n: i32, textures: u32*, residences: bool*) -> bool
public ffi fn glIsTexture(texture: u32) -> bool
public ffi fn glTexSubImage1D(target: u32, level: i32, xoffset: i32, width: i32, format: u32,
    type: u32, pixels: void*) -> void

public ffi fn glTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32,
    height: i32, format: u32, type: u32, pixels: void*) -> void

public ffi fn glCopyTexImage1D(target: u32, level: i32, internalformat: u32, x: i32, y: i32,
    width: i32, border: i32) -> void

public ffi fn glCopyTexImage2D(target: u32, level: i32, internalformat: u32, x: i32, y: i32,
    width: i32, height: i32, border: i32) -> void

public ffi fn glCopyTexSubImage1D(target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32) -> void
public ffi fn glCopyTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32,
    width: i32, height: i32) -> void

// Evaluators
public ffi fn glMap1d(target: u32, u1: f64, u2: f64, stride: i32, order: i32, points: f64*) -> void
public ffi fn glMap1f(target: u32, u1: f32, u2: f32, stride: i32, order: i32, points: f32*) -> void
public ffi fn glMap2d(target: u32, u1: f64, u2: f64, ustride: i32, uorder: i32,
    v1: f64, v2: f64, vstride: i32, vorder: i32, points: f64*) -> void
public ffi fn glMap2f(target: u32, u1: f32, u2: f32, ustride: i32, uorder: i32,
    v1: f32, v2: f32, vstride: i32, vorder: i32, points: f32*) -> void
public ffi fn glGetMapdv(target: u32, query: u32, v: f64*) -> void
public ffi fn glGetMapfv(target: u32, query: u32, v: f32*) -> void
public ffi fn glGetMapiv(target: u32, query: u32, v: i32*) -> void
public ffi fn glEvalCoord1d(u: f64) -> void
public ffi fn glEvalCoord1f(u: f32) -> void
public ffi fn glEvalCoord1dv(u: f64*) -> void
public ffi fn glEvalCoord1fv(u: f32*) -> void
public ffi fn glEvalCoord2d(u: f64, v: f64) -> void
public ffi fn glEvalCoord2f(u: f32, v: f32) -> void
public ffi fn glEvalCoord2dv(u: f64*) -> void
public ffi fn glEvalCoord2fv(u: f32*) -> void
public ffi fn glMapGrid1d(un: i32, u1: f64, u2: f64) -> void
public ffi fn glMapGrid1f(un: i32, u1: f32, u2: f32) -> void
public ffi fn glMapGrid2d(un: i32, u1: f64, u2: f64, vn: i32, v1: f64, v2: f64) -> void
public ffi fn glMapGrid2f(un: i32, u1: f32, u2: f32, vn: i32, v1: f32, v2: f32) -> void
public ffi fn glEvalPoint1(i: i32) -> void
public ffi fn glEvalPoint2(i: i32, j: i32) -> void
public ffi fn glEvalMesh1(mode: u32, i1: i32, i2: i32) -> void
public ffi fn glEvalMesh2(mode: u32, i1: i32, i2: i32, j1: i32, j2: i32) -> void

// Fog
public ffi fn glFogf(pname: u32, param: f32) -> void
public ffi fn glFogi(pname: u32, param: i32) -> void
public ffi fn glFogfv(pname: u32, params: f32*) -> void
public ffi fn glFogiv(pname: u32, params: i32*) -> void

// Selection and Feedback
public ffi fn glFeedbackBuffer(size: i32, type: u32, buffer: f32*) -> void
public ffi fn glPassThrough(token: f32) -> void
public ffi fn glSelectBuffer(size: i32, buffer: u32*) -> void
public ffi fn glInitNames() -> void
public ffi fn glLoadName(name: u32) -> void
public ffi fn glPushName(name: u32) -> void
public ffi fn glPopName() -> void
public ffi fn glDrawRangeElements(mode: u32, start: u32, end: u32, count: i32, type: u32, indices: void*) -> void
public ffi fn glTexImage3D(target: u32, level: i32, internalFormat: i32, width: i32, height: i32,
    depth: i32, border: i32, format: u32, type: u32, pixels: void*) -> void
public ffi fn glTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32,
    height: i32, depth: i32, format: u32, type: u32, pixels: void*) -> void
public ffi fn glCopyTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32,
    y: i32, width: i32, height: i32) -> void
public ffi fn glColorTable(target: u32, internalformat: u32, width: i32, format: u32, type: u32,
    table: void*) -> void
public ffi fn glColorSubTable(target: u32, start: i32, count: i32, format: u32, type: u32, data: void*) -> void
public ffi fn glColorTableParameteriv(target: u32, pname: u32, params: i32*) -> void
public ffi fn glColorTableParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glCopyColorSubTable(target: u32, start: i32, x: i32, y: i32, width: i32) -> void
public ffi fn glCopyColorTable(target: u32, internalformat: u32, x: i32, y: i32, width: i32) -> void
public ffi fn glGetColorTable(target: u32, format: u32, type: u32, table: void*) -> void
public ffi fn glGetColorTableParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glGetColorTableParameteriv(target: u32, pname: u32, params: i32*) -> void
public ffi fn glBlendEquation(mode: u32) -> void
public ffi fn glBlendColor(red: f32, green: f32, blue: f32, alpha: f32) -> void
public ffi fn glHistogram(target: u32, width: i32, internalformat: u32, sink: bool) -> void
public ffi fn glResetHistogram(target: u32) -> void
public ffi fn glGetHistogram(target: u32, reset: bool, format: u32, type: u32, values: void*) -> void
public ffi fn glGetHistogramParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glGetHistogramParameteriv(target: u32, pname: u32, params: i32*) -> void
public ffi fn glMinmax(target: u32, internalformat: u32, sink: bool) -> void
public ffi fn glResetMinmax(target: u32) -> void
public ffi fn glGetMinmax(target: u32, reset: bool, format: u32, types: u32, values: void*) -> void
public ffi fn glGetMinmaxParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glGetMinmaxParameteriv(target: u32, pname: u32, params: i32*) -> void
public ffi fn glConvolutionFilter1D(target: u32, internalformat: u32, width: i32, format: u32, type: u32,
    image: void*) -> void

public ffi fn glConvolutionFilter2D(target: u32, internalformat: u32, width: i32, height: i32, format: u32,
    type: u32, image: void*) -> void

public ffi fn glConvolutionParameterf(target: u32, pname: u32, params: f32) -> void
public ffi fn glConvolutionParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glConvolutionParameteri(target: u32, pname: u32, params: i32) -> void
public ffi fn glConvolutionParameteriv(target: u32, pname: u32, params: i32*) -> void
public ffi fn glCopyConvolutionFilter1D(target: u32, internalformat: u32, x: i32, y: i32, width: i32) -> void
public ffi fn glCopyConvolutionFilter2D(target: u32, internalformat: u32, x: i32, y: i32, width: i32,
    height: i32) -> void

public ffi fn glGetConvolutionFilter(target: u32, format: u32, type: u32, image: void*) -> void
public ffi fn glGetConvolutionParameterfv(target: u32, pname: u32, params: f32*) -> void
public ffi fn glGetConvolutionParameteriv(target: u32, pname: u32, params: i32*) -> void

public ffi fn glSeparableFilter2D(target: u32, internalformat: u32, width: i32, height: i32, format: u32,
    type: u32, row: void*, column: void*) -> void

public ffi fn glGetSeparableFilter(target: u32, format: u32, type: u32, row: void*, column: void*, span: void*) -> void

public ffi fn glActiveTexture(texture: u32) -> void
public ffi fn glClientActiveTexture(texture: u32) -> void

public ffi fn glCompressedTexImage1D(target: u32, level: i32, internalformat: u32, width: i32, border: i32,
    imageSize: i32, data: void*) -> void

public ffi fn glCompressedTexImage2D(target: u32, level: i32, internalformat: u32, width: i32, height: i32,
    border: i32, imageSize: i32, data: void*) -> void

public ffi fn glCompressedTexImage3D(target: u32, level: i32, internalformat: u32, width: i32, height: i32,
     voiddepth: i32, border: i32, imageSize: i32, data: void*)

public ffi fn glCompressedTexSubImage1D(target: u32, level: i32, xoffset: i32, width: i32, format: u32,
    imageSize: i32, data: void*) -> void

public ffi fn glCompressedTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32,
    height: i32, format: u32, imageSize: i32, data: void*) -> void

public ffi fn glCompressedTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32,
    width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: void*) -> void

public ffi fn glGetCompressedTexImage(target: u32, lod: i32, img: void*) -> void
public ffi fn glMultiTexCoord1d(target: u32, s: f64) -> void
public ffi fn glMultiTexCoord1dv(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord1f(target: u32, s: f32) -> void
public ffi fn glMultiTexCoord1fv(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord1i(target: u32, s: i32) -> void
public ffi fn glMultiTexCoord1iv(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord1s(target: u32, s: i16) -> void
public ffi fn glMultiTexCoord1sv(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord2d(target: u32, s: f64, t: f64) -> void
public ffi fn glMultiTexCoord2dv(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord2f(target: u32, s: f32, t: f32) -> void
public ffi fn glMultiTexCoord2fv(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord2i(target: u32, s: i32, t: i32) -> void
public ffi fn glMultiTexCoord2iv(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord2s(target: u32, s: i16, t: i16) -> void
public ffi fn glMultiTexCoord2sv(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord3d(target: u32, s: f64, t: f64, r: f64) -> void
public ffi fn glMultiTexCoord3dv(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord3f(target: u32, s: f32, t: f32, r: f32) -> void
public ffi fn glMultiTexCoord3fv(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord3i(target: u32, s: i32, t: i32, r: i32) -> void
public ffi fn glMultiTexCoord3iv(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord3s(target: u32, s: i16, t: i16, r: i16) -> void
public ffi fn glMultiTexCoord3sv(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord4d(target: u32, s: f64, t: f64, r: f64, q: f64) -> void
public ffi fn glMultiTexCoord4dv(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord4f(target: u32, s: f32, t: f32, r: f32, q: f32) -> void
public ffi fn glMultiTexCoord4fv(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord4i(target: u32, s: i32, t: i32, r: i32, q: i32) -> void
public ffi fn glMultiTexCoord4iv(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord4s(target: u32, s: i16, t: i16, r: i16, q: i16) -> void
public ffi fn glMultiTexCoord4sv(target: u32, v: i16*) -> void
public ffi fn glLoadTransposeMatrixd(m: f64[16]) -> void
public ffi fn glLoadTransposeMatrixf(m: f32[16]) -> void
public ffi fn glMultTransposeMatrixd(m: f64[16]) -> void
public ffi fn glMultTransposeMatrixf(m: f32[16]) -> void
public ffi fn glSampleCoverage(value: f32, invert: bool) -> void
public ffi fn glActiveTextureARB(texture: u32) -> void
public ffi fn glClientActiveTextureARB(texture: u32) -> void
public ffi fn glMultiTexCoord1dARB(target: u32, s: f64) -> void
public ffi fn glMultiTexCoord1dvARB(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord1fARB(target: u32, s: f32) -> void
public ffi fn glMultiTexCoord1fvARB(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord1iARB(target: u32, s: i32) -> void
public ffi fn glMultiTexCoord1ivARB(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord1sARB(target: u32, s: i16) -> void
public ffi fn glMultiTexCoord1svARB(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord2dARB(target: u32, s: f64, t: f64) -> void
public ffi fn glMultiTexCoord2dvARB(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord2fARB(target: u32, s: f32, t: f32) -> void
public ffi fn glMultiTexCoord2fvARB(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord2iARB(target: u32, s: i32, t: i32) -> void
public ffi fn glMultiTexCoord2ivARB(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord2sARB(target: u32, s: i16, t: i16) -> void
public ffi fn glMultiTexCoord2svARB(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord3dARB(target: u32, s: f64, t: f64, r: f64) -> void
public ffi fn glMultiTexCoord3dvARB(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord3fARB(target: u32, s: f32, t: f32, r: f32) -> void
public ffi fn glMultiTexCoord3fvARB(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord3iARB(target: u32, s: i32, t: i32, r: i32) -> void
public ffi fn glMultiTexCoord3ivARB(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord3sARB(target: u32, s: i16, t: i16, r: i16) -> void
public ffi fn glMultiTexCoord3svARB(target: u32, v: i16*) -> void
public ffi fn glMultiTexCoord4dARB(target: u32, s: f64, t: f64, r: f64, q: f64) -> void
public ffi fn glMultiTexCoord4dvARB(target: u32, v: f64*) -> void
public ffi fn glMultiTexCoord4fARB(target: u32, s: f32, t: f32, r: f32, q: f32) -> void
public ffi fn glMultiTexCoord4fvARB(target: u32, v: f32*) -> void
public ffi fn glMultiTexCoord4iARB(target: u32, s: i32, t: i32, r: i32, q: i32) -> void
public ffi fn glMultiTexCoord4ivARB(target: u32, v: i32*) -> void
public ffi fn glMultiTexCoord4sARB(target: u32, s: i16, t: i16, r: i16, q: i16) -> void
public ffi fn glMultiTexCoord4svARB(target: u32, v: i16*) -> void







