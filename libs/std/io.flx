// stdio.flx
// Copyright (c) 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export std::io
import libc

let ASCII_BACKSLASH: i8     = 92
let ASCII_PERCENT: i8       = 37

// this exists solely for semantic reasons.
fn char(c: i8) -> i8    => c
fn char(c: str) -> i8   => c[0]

fn error(msg: str)
{
	libc::printf("Invalid format specifier: %s\n", msg)
	libc::abort()
}

fn to_string_i64(n: i64) -> string
{
	var ret = @raw alloc i8 [16]
	let len = libc::sprintf(ret, "%lld", n)

	let s = string(ret, len)
	free ret

	return s
}

fn to_string_u64(n: u64) -> string
{
	var ret = @raw alloc i8 [16]
	let len = libc::sprintf(ret, "%llu", n)

	let s = string(ret, len)
	free ret

	return s
}


fn to_string_f64(n: f64) -> string
{
	var ret = @raw alloc i8 [24]
	let len = libc::sprintf(ret, "%f", n)

	let s = string(ret, len)
	free ret

	return s
}



public fn format(fmt: str, args: [any: ...]) -> string
{
	// todo: this is quite inefficient.
	// should we make some kind of stringbuilder class?

	var ret: string
	var argi = 0

	var idx = 0
	while idx < fmt.length
	{
		let ch = fmt[idx]
		if ch == char("%")
		{
			if argi >= args.length
			{
				error(format("too few arguments: got only %, expected at least %", args.length, argi + 1))
			}
			else
			{
				let arg = args[argi]
				argi += 1

				if arg is u8            => ret.append(to_string_u64(arg as u8))
				else if arg is u16      => ret.append(to_string_u64(arg as u16))
				else if arg is u32      => ret.append(to_string_u64(arg as u32))
				else if arg is u64      => ret.append(to_string_u64(arg as u64))

				else if arg is i8       => ret.append(to_string_i64(arg as i8))
				else if arg is i16      => ret.append(to_string_i64(arg as i16))
				else if arg is i32      => ret.append(to_string_i64(arg as i32))
				else if arg is i64      => ret.append(to_string_i64(arg as i64))

				else if arg is f32      => ret.append(to_string_f64(arg as f32))
				else if arg is f64      => ret.append(to_string_f64(arg as f64))

				else if arg is string   => ret.append(arg as string)
				else if arg is str      => ret.append(arg as str)

				else                    => ret.append("(?)")
			}
		}
		else
		{
			if ch == char("\\")
			{
				idx += 1
				ret.append(fmt[idx])
			}
			else
			{
				ret.append(ch)
			}
		}

		idx += 1
	}

	return ret
}


public fn println(fmt: str, args: [any: ...])
{
	libc::printf("%s\n", format(fmt, ...args).ptr)
}










