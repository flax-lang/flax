// map.flx
// Copyright (c) 2017, zhiayang
// Licensed under the Apache License Version 2.0.

export std
import libc
import std::opt

// haphazardly taken from http://sidsen.azurewebsites.net/papers/rb-trees-talg.pdf

public class map<K, V>
{
	struct node
	{
		var parent: &node
		var left: &node
		var right: &node

		var key: K
		var value: V

		var rank: int
	}

	var root: &node
	var size: int

	init()
	{
		root = null
		size = 0
	}




	fn _rotateLeft(n: &node)
	{
		var r = n.right
		n.right = r.left

		if(r.left != null)  => r.left.parent = n

		r.parent = n.parent
		if(n.parent == null)        => root = r
		else if(n.parent.left == n) => n.parent.left = r
		else                        => n.parent.right = r

		r.left = n
		n.parent = r
	}

	fn _rotateRight(n: &node)
	{
		var l = n.left
		n.left = l.right

		if(l.right != null) => l.right.parent = n

		l.parent = n.parent
		if(n.parent == null)            => root = l
		else if(n.parent.right == n)    => n.parent.right = l
		else                            => n.parent.left = l

		l.right = n
		n.parent = l
	}

	fn _getPredecessor(node: &node) -> &node
	{
		if(node == null) => return null
		else if(node.left != null)
		{
			var l = node.left
			while(l.right != null)
				=> l = l.right

			return l
		}
		else
		{
			// keep searching upwards till we find something on our left.
			var par = node.parent
			var chd = node

			while(par != null && chd == par.left)
			{
				chd = par
				par = par.parent
			}

			return par
		}
	}

	fn _getSuccessor(node: &node) -> &node
	{
		if(node == null) => return null
		else if(node.right != null)
		{
			var r = node.right
			while(r.left != null)
				=> r = r.left

			return r
		}
		else
		{
			var par = node.parent
			var chd = node

			while(par != null && chd == par.right)
			{
				chd = par
				par = par.parent
			}

			return par
		}
	}





	// returns true if we inserted a new value, false if the key already existed
	fn insert(key: K, val: V) -> bool
	{
		if(root == null)
		{
			root = alloc node(key: key, value: val, rank: 0)
			size = 1
			return true
		}
		else
		{
			return _insert(key, val, root)
		}
	}

	fn _insert(key: K, val: V, _n: &node) -> bool
	{
		fn checkLeftUnbal(n: &node) -> bool
		{
			if(n.left == null)
			{
				if(n.rank == 1) => return true
				else            => return false
			}
			else if(n.rank >= n.left.rank + 2)
			{
				return true
			}
			else
			{
				return false
			}
		}


		fn checkRightUnbal(n: &node) -> bool
		{
			if(n.right == null)
			{
				if(n.rank == 1) => return true
				else            => return false
			}
			else if(n.rank >= n.right.rank + 2)
			{
				return true
			}
			else
			{
				return false
			}
		}



		// args are immutable.
		var n = _n

		var side = 0        // -1 for left, 1 for right

		if(n.key == key) => return false
		else if(key < n.key)
		{
			side = -1
			if(n.left == null)
			{
				n.left = alloc node(key: key, value: val, parent: n)
				if(n.left == null)
				{
					libc::printf("node alloc failed!\n")
					libc::abort()
				}
			}
			else                => return _insert(key, val, n.left)
		}
		else
		{
			side = 1
			if(n.right == null)
			{
				n.right = alloc node(key: key, value: val, parent: n)
				if(n.right == null)
				{
					libc::printf("node alloc failed!\n")
					libc::abort()
				}
			}
			else                => return _insert(key, val, n.right)
		}




		if(n.parent != null && n.parent.rank == 0)
		{
			n.parent.rank += 1

			var par = n.parent
			while(par != null && n.rank + 1 != par.rank)
			{
				if(side == -1)
				{
					if(checkRightUnbal(par))
					{
						if(n.left == null || n.rank >= n.left.rank + 2)
						{
							n.rank -= 1
							n.right.rank += 1
							_rotateLeft(n)
						}
						par.rank -= 1
						_rotateRight(par)
						break
					}
				}
				else
				{
					if(checkLeftUnbal(par))
					{
						if(n.right == null || n.rank >= n.right.rank + 2)
						{
							n.rank -= 1
							n.left.rank += 1
							_rotateRight(n)
						}
						par.rank -= 1
						_rotateLeft(par)
						break
					}
				}


				n = par
				par = n.parent

				n.rank += 1
			}
		}

		size += 1
		return true
	}



	fn _rebalance(_n: &node, _p: &node, _s: &node)
	{
		fn nodeIs22(n: &node) -> bool
		{
			if(n == null || n.rank == 0)    => return false
			if(n.rank == 1)                 => return (n.left == null && n.right == null)
			else                            => return (n.left.rank == n.right.rank && n.left.rank + 2 == n.rank)
		}

		fn _rank(n: &node) -> int
		{
			if(n == null)   => return -1
			else            => return n.rank
		}

		var n = _n
		var parent = _p
		var sibling = _s

		var deltaRank = parent.rank - n.rank
		while(deltaRank == 3 || parent.rank == 1 && nodeIs22(parent))
		{
			var deltaRankSibling = 0
			if(sibling == null) => deltaRankSibling = parent.rank + 1
			else                => deltaRankSibling = parent.rank - sibling.rank

			if(deltaRankSibling == 2)
			{
				parent.rank -= 1
			}
			else
			{
				let drsL = sibling.rank - _rank(sibling.left)
				let drsR = sibling.rank - _rank(sibling.right)

				if(drsL == 2 && drsR == 2)
				{
					parent.rank -= 1
					sibling.rank -= 1
				}
				else if(parent.right == sibling)
				{
					if(drsR == 1)
					{
						sibling.rank += 1
						parent.rank -= 1
						if(sibling.left == null) => parent.rank -= 1

						_rotateLeft(parent)
					}
					else
					{
						parent.rank -= 2
						sibling.rank -= 1
						sibling.left.rank += 2

						_rotateRight(sibling)
						_rotateLeft(parent)
					}
					break
				}
				else
				{
					if(drsL == 1)
					{
						sibling.rank += 1
						parent.rank -= 1
						if(sibling.right == null) => parent.rank -= 1

						_rotateRight(parent)
					}
					else
					{
						parent.rank -= 2
						sibling.rank -= 1
						sibling.right.rank += 2

						_rotateLeft(sibling)
						_rotateRight(parent)
					}
					break
				}
			}

			if(parent.parent == null) => return

			n = parent
			parent = parent.parent
			if(parent.left == n)    => sibling = parent.right
			else                    => sibling = parent.left

			deltaRank = parent.rank - n.rank
		}
	}



	// returns true if the key was found, false if not.
	fn remove(key: K) -> bool
	{
		var n = _search(key, root)
		if(n == null) => return false

		// ok, now remove the node from the thing.
		size -= 1

		if(n.left == null && n.right == null && n == root)
		{
			// if we're the only node then just delete us and go away
			free n
			root = null
			return true
		}



		if(n.left != null && n.right != null)
		{
			let p = _getPredecessor(n)
			n.key = p.key
			n.value = p.value
			n = p
		}


		var replacement: &node = null
		if(n.left != null)  => replacement = n.left
		else                => replacement = n.right

		if(replacement != null)
		{
			var sibling: &node = null
			replacement.parent = n.parent

			if(n.parent == null)
			{
				root = replacement
				return true
			}
			else if(n == n.parent.left)
			{
				n.parent.left = replacement
				sibling = n.parent.right
			}
			else
			{
				n.parent.right = replacement
				sibling = n.parent.left
			}

			n.left = null
			n.right = null
			n.parent = null

			_rebalance(replacement, replacement.parent, sibling)
		}
		else
		{
			let rebalNode = n.parent
			var sibling: &node = null

			if(n == n.parent.left)
			{
				n.parent.left = null
				sibling = rebalNode.right
			}
			else if(n == n.parent.right)
			{
				n.parent.right = null
				sibling = rebalNode.left
			}

			n.parent = null
			n.rank -= 1

			_rebalance(n, rebalNode, sibling)
		}

		return true
	}




	fn search(key: K) -> std::opt!<V>
	{
		let n = _search(key, root)
		if(n == null)   => return std::opt!<V>::none
		else            => return std::opt::some(n.value)
	}

	fn _search(key: K, n: &node) -> &node
	{
		if(n == null)       => return null
		if(n.key == key)    => return n

		if(key < n.key)     => return _search(key, n.left)
		else                => return _search(key, n.right)
	}
}

















