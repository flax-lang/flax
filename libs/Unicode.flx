// Unicode.flx
// Copyright (c) 2014 - 2015, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

import LibCInterface

public fn Utf8Length(_text: i8*) -> i64
{
	var len = 0
	var text = _text


	while *text != 0
	{
		if (*text & 0xC0) != 0x80
		{
			len += 1
		}

		text = text + 1
	}

	return len
}

public fn Utf8CharLength(char: i8*) -> i64
{
	if char == null { return 0 }

	if (char[0] & 0xF8) == 0xF0 { return 4 }
	else if (char[0] & 0xF0) == 0xE0 { return 3 }
	else if (char[0] & 0xE0) == 0xC0 { return 2 }
	else { return 1 }
}

// returns a pointer to the beginning of the pos'th utf8 codepoint
// in the buffer at text
public fn Utf8Index(_text: i8*, _pos: i64) -> i8*
{
	var text = _text
	var pos = _pos

	pos += 1

	while *text != 0
	{
		if (*text & 0xC0) != 0x80
		{
			pos -= 1
		}

		if pos == 0
		{
			return text
		}

		text = text + 1
	}

	return null
}





// converts a utf8 string to uppercase.
// return: (out buffer, out size)
public fn Utf8ToUppercase(input: i8*, inputLength: i64) -> (i8*, i64)
{
	// programExit("not supported lol")
	return (null, 0)
}











// size_t utf8toupper(const char* input, size_t inputSize, char* target, size_t targetSize, int32_t* errors)
// {
// 	CaseMappingState state;
// 	size_t bytes_written = 0;

// 	/* Validate parameters */

// 	UTF8_VALIDATE_PARAMETERS_CHAR(char, bytes_written);

// 	/* Initialize case mapping */

// 	if (!casemapping_initialize(
// 		&state,
// 		input, inputSize,
// 		target, targetSize,
// 		UppercaseIndex1Ptr, UppercaseIndex2Ptr, UppercaseDataPtr))
// 	{
// 		UTF8_SET_ERROR(NONE);

// 		return bytes_written;
// 	}

// 	/* Execute case mapping as long as input remains */

// 	while (state.src_size > 0)
// 	{
// 		size_t result = casemapping_execute(&state);
// 		if (!result)
// 		{
// 			UTF8_SET_ERROR(NOT_ENOUGH_SPACE);

// 			return bytes_written;
// 		}

// 		bytes_written += result;
// 	}

// 	UTF8_SET_ERROR(NONE);

// 	return bytes_written;
// }






// size_t utf8tolower(const char* input, size_t inputSize, char* target, size_t targetSize, int32_t* errors)
// {
// 	CaseMappingState state;
// 	size_t bytes_written = 0;

// 	/* Validate parameters */

// 	UTF8_VALIDATE_PARAMETERS_CHAR(char, bytes_written);

// 	/* Initialize case mapping */

// 	if (!casemapping_initialize(
// 		&state,
// 		input, inputSize,
// 		target, targetSize,
// 		LowercaseIndex1Ptr, LowercaseIndex2Ptr, LowercaseDataPtr))
// 	{
// 		UTF8_SET_ERROR(NONE);

// 		return bytes_written;
// 	}

// 	/* Execute case mapping as long as input remains */

// 	while (state.src_size > 0)
// 	{
// 		size_t result = casemapping_execute(&state);
// 		if (!result)
// 		{
// 			UTF8_SET_ERROR(NOT_ENOUGH_SPACE);

// 			return bytes_written;
// 		}

// 		bytes_written += result;
// 	}

// 	UTF8_SET_ERROR(NONE);

// 	return bytes_written;
// }








